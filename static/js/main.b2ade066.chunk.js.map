{"version":3,"sources":["media/img/rl_avatar.svg","helpers/utilityLambdas/generateMap.js","helpers/initModels/initGameState.js","helpers/initModels/initPlayerStats.js","helpers/utilityLambdas/toCoords.js","helpers/utilityLambdas/rollDie.js","helpers/reducers/gameStateReducer.js","components/containers/Console/PrintBtn/index.js","helpers/dictionaries/beastDictionary.js","helpers/initModels/elements.js","helpers/utilityLambdas/generateNewBeast.js","components/containers/Console/Beasterator/index.js","components/containers/Console/Roller/index.js","components/containers/Console/Locationator/index.js","components/containers/Console/index.js","components/atoms/PlayerAvatar/index.js","components/molecules/PlayerStats/index.js","components/containers/PlayerDisplay/index.js","components/molecules/LogBody/index.js","components/molecules/LogScrollBtns/index.js","components/molecules/LogFilterBtns/index.js","components/containers/Log/index.js","components/containers/HUD/index.js","helpers/dictionaries/itemDictionary.js","components/molecules/InventoryControls/index.js","components/containers/ControlsPanel/index.js","components/containers/ActionHUD/index.js","components/atoms/PlayerCell/index.js","components/molecules/PlayerGrid/index.js","components/molecules/BeastHealthBar/index.js","components/molecules/BeastCell/index.js","components/molecules/ActorGrid/index.js","components/atoms/Cell/index.js","components/molecules/TileGrid/index.js","components/containers/Room/index.js","components/containers/ActionDisplay/index.js","components/containers/GameDisplay/index.js","components/containers/TargetHUD/index.js","components/containers/InfoPanel/index.js","components/containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CONSTANTS","generateRoom","coords","getAvailWidth","x","getAvailHeight","y","dimensionality","Math","floor","random","tiles","Array","from","length","_","i","tileType","isEdge","tunnelDirections","filter","dir","id","type","initGameState","turn","player","levelCoords","roomId","roomCoords","inventory","baseTitle","isEquipped","damage","key","proximity","equippedBy","range","rangeMod","description","baseStats","strength","agility","constitution","perception","wisdom","intelligence","savingThrow","vitalStats","hp","sp","xp","corruption","statMod","mod","log","messages","ctx","value","location","level","rooms","generateRooms","room","Error","JSON","stringify","nextCoords","concat","r","undefined","generateMap","nearbyBeasts","toIndex","toCoords","index","rollDie","die","hazMod","indexOf","n","Number","split","d","reducedVal","ceil","reduce","acc","curr","GameStateContext","createContext","useGameState","useContext","gameStateReducer","gameState","action","filteredRest","obj","filterKey","Object","fromEntries","keys","test","map","gameRestFromLocation","addLog","msgs","isArray","forEach","msg","gameRest","logRest","formattedMsgs","console","locationRest","beast","loc","roomIndex","openTiles","tile","t","updatedBeast","assign","b","isTargeted","targetState","targetBeast","handleTargetBeast","dX","dY","tileIndex","nearbyBeastsCoords","beastTarget","weapon","item","amtFromAttack","dyingMessage","playerRest","targetActor","rollMsg","vitalStatsRest","amt","focusMode","itmAction","target","verb","doesRemove","GameStateProvider","props","useReducer","dispatchGameState","useMemo","Provider","PrintBtn","onClick","beastDictionary","scarcity","healthDie","armorDie","savingThrowDie","elementalScarcity","imgSrc","elements","fire","healthMod","water","nether","getKey","generateNewBeast","allowedBeasts","locationLvl","floorDCChecks","lvlMod","beastBaseTitle","beastRef","maxHp","elem","generatedParams","Beasterator","useState","setBeast","selectedBeastList","setBeastList","getNewBeast","handlePushBeast","newBeast","beastCheckboxes","updatedList","s","handleToggleCheckbox","className","standardDice","Roller","dieAmt","setDieAmt","setDie","setMod","rollVal","setRollVal","diceBtns","btnDie","handleDieSelect","rollString","onChange","rollResult","Locationator","isInBattle","Console","isActive","PlayerAvatar","src","avatar","alt","PlayerStats","playerStats","PlayerDisplay","LogBody","m","LogScrollBtns","messagesLength","activeViewIndex","handleAdjustViewIndex","LogFilterBtns","ctxFocus","displayTypes","handleFilterClick","filterButtons","Log","setCtxFocus","setActiveViewIndex","filteredMessages","endIndex","begIndex","logMessages","slice","HUD","canDrop","itemDictionary","allowedActions","potion","InventoryControls","focusItem","setFocusItem","isInIventory","hasOwnProperty","a","ControlsPanel","ActionHUD","roomStats","roomHUD","roomHUDTip","PlayerCell","gridAreaStyle","style","PlayerGrid","gridStyle","playerCoords","gridColumn","gridRow","BeastHealthBar","currHealth","maxHealth","barStyle","width","BeastCell","replace","toLowerCase","ActorGrid","beastGridAreaStyle","dispatchParams","Cell","TileGrid","handleClickTile","Room","useEffect","handleToggleInventory","forceClose","arrowHandlerKeyCodes","window","addEventListener","e","kCode","isComposing","keyCode","dirFromCode","gridTemplateColumns","gridTemplateRows","ActionDisplay","GameDisplay","beastTargetParams","TargetHUD","targetedObject","k","CommandInfoPanel","InfoPanel","Game","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,uC,2eCArCC,EACkB,GADlBA,EAEuB,GAFvBA,EAGuB,GAGvBC,EAAe,SAACC,GAClB,IAAMC,EAAgB,kBAAMH,EAA+BE,EAAOE,GAC5DC,EAAiB,kBAAML,EAA+BE,EAAOI,GACnE,GAAID,IAAmBL,GAAqCG,IAAkBH,EAAmC,OAAO,KAExH,IAEMO,EAAiBC,KAAKC,MAAMD,KAAKE,UAAYV,EAAoC,EAAIA,GAAqCA,GAI1HW,EAAQC,MAAMC,KAAK,CAACC,OAAO,KAAD,IAAEP,EAAkB,KAAI,SAACQ,EAAGC,GAGxD,MAAO,CACHC,SANO,SAACD,GAAD,OAAOA,GAAKT,GAAkBS,EAAIT,IAAmB,GAAKS,EAAIT,IAAoBA,EAAiB,GAAMS,GAAK,SAACT,EAAkB,GAAKA,EAGhIW,CAAOF,GAAK,OAAS,WAOpCG,EAAmB,CACrBd,KAAoBL,EAAoC,OAAS,KACjEG,KAAmBH,EAAoC,QAAU,MACnEoB,QAAO,SAAAC,GAAG,OAAY,OAARA,KAEhB,MAAO,CACHC,GApBO,EAqBPC,KApBS,OAqBThB,iBACAI,QACAQ,qBChBOK,EAhBO,CAClBC,KAAM,EACNC,OCLsB,CACtBC,YAAa,CACTC,OAAQ,GAEZC,WAAY,CACRzB,EAAG,EACHE,EAAG,GAEPwB,UAAW,CAAC,CACRP,KAAM,SACNQ,UAAW,QACXC,YAAY,EACZC,OAAQ,MACRC,IAAK,KACLC,UAAW,CACP,QACA,UAEJC,WAAY,OACZC,MAAO,OACPC,SAAU,MACVC,YAAa,gGAEjB,CACIhB,KAAM,SACNW,IAAK,KACLH,UAAW,uBACXI,UAAW,SACXG,SAAU,MACVF,WAAY,OACZG,YAAa,4DAEjBC,UAAW,CAEPC,SAAU,EACVC,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,OAAQ,EACRC,aAAc,EACdC,YAAa,OAEjBC,WAAY,CAERC,GAAI,GACJC,GAAI,EACJC,GAAI,GAERC,WAAY,CACR,CACI7B,KAAM,GACNgB,YAAa,GACbc,QAAS,aACTC,KAAM,KD/CdC,IAAK,CACDC,SAAU,CAAC,CACPC,IAAK,UACLC,MAAO,mBAGfC,SAAU,CACNC,MAAO,EACPC,MDyBY,WAoBhB,OAdsB,SAAhBC,EAAiB5D,GACnB,IAAM6D,EAAO9D,EAAaC,GAC1B,GAAK6D,EACA,CACD,IAAM1C,EAAM0C,EAAK5C,iBAAiBX,KAAKC,MAAMD,KAAKE,SAAWqD,EAAK5C,iBAAiBL,SACnF,IAAKO,GAAwC,IAAjC0C,EAAK5C,iBAAiBL,OAAc,MAAM,IAAIkD,MAAJ,gEAAmEC,KAAKC,UAAU7C,GAAlF,YAA0F4C,KAAKC,UAAUH,EAAK5C,oBACpK,IAAMgD,EAAa,CACf/D,EAAW,UAARiB,EAAkBnB,EAAOE,EAAI2D,EAAKxD,eAAiBL,EAAOE,EAC7DE,EAAW,SAARe,EAAiBnB,EAAOI,EAAIyD,EAAKxD,eAAiBL,EAAOI,GAEhE,MAAO,GAAG8D,OAAOL,GAAMK,OAAON,EAAcK,IAAa/C,QAAO,SAAAiD,GAAC,YAAUC,IAAND,MAItEP,CAnBY,CACf1D,EAAG,EACHE,EAAG,IC5BIiE,GACPC,aAAc,KEVhBC,EAAU,SAACvE,EAAQK,GAAT,OAA4BL,EAAOI,EAAIC,EAAiBL,EAAOE,GAEhEsE,EAPE,SAACC,EAAOpE,GAAR,MAA4B,CACzCH,EAAGuE,EAAQpE,EACXD,EAAGE,KAAKC,MAAMkE,EAAQpE,KCYXqE,EAdC,SAACC,GAEf,GAAY,IAARA,EAAW,OAAO,EACtB,IAAMC,EAASD,EAAIE,QAAQ,MAAQ,EAC7BC,EAAIC,OAAOJ,EAAIK,MAAM,IAAI,IACzBC,EAAIF,OAAOH,EAASD,EAAIK,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAKL,EAAIK,MAAM,KAAK,IACrE5B,EAAMwB,EAASG,OAAOJ,EAAIK,MAAM,KAAK,IAAM,EAE3CE,EAAaxE,MAAMC,KAAK,CAACC,OAAQkE,IAAI,SAAAjE,GAAC,OADtBP,KAAK6E,KAAK7E,KAAKE,SAAWyE,MAE7CG,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,KAC3BlC,EACJ,OAAO8B,EAAa,EAAIA,EAAa,GCNjCK,EAAmBC,0BAEnBC,EAAe,WACjB,IAAMlC,EAAMmC,qBAAWH,GACvB,IAAKhC,EACD,MAAM,IAAIO,MAAJ,qCAEV,OAAOP,GAGLoC,EAAmB,SAACC,EAAWC,GACjCD,EAAUrE,MAAQ,EAClB,IAAMuE,EAAe,SAACC,EAAKC,GAAN,OAAoBC,OAAOC,YAC5CD,OAAOE,KAAKJ,GACT7E,QAAO,SAAAc,GAAG,OAAKgE,EAAUI,KAAKpE,MAC9BqE,KAAI,SAAArE,GAAG,MAAI,CAACA,EAAK+D,EAAI/D,SAGtBsE,EAAuBR,EAAaF,EAAW,YAoB/CW,EAAS,SAACC,GACZ,IAAKA,EAAM,MAAM,IAAI1C,MAAM,qBAC3B,GAAIpD,MAAM+F,QAAQD,GACdA,EAAKE,SAAQ,SAAAC,GACT,IAAKA,EAAIpD,IAAK,MAAM,IAAIO,MAAJ,sCAAyCC,KAAKC,UAAU2C,aAG/E,IAAKH,EAAKjD,IAAM,MAAM,IAAIO,MAAJ,sCAAyCC,KAAKC,UAAUwC,KACnF,IAAMI,EAAWd,EAAaF,EAAW,OACnCiB,EAAUf,EAAaF,EAAUvC,IAAK,YAEtCyD,EAAgBpG,MAAM+F,QAAQD,GAAQA,EAAKH,KAAI,gBAAE9C,EAAF,EAAEA,IAAKC,EAAP,EAAOA,MAAP,MAAmB,CAACD,MAAKC,MAAM,GAAD,OAAKoC,EAAUrE,KAAf,cAAyBiC,OAAa,CAACD,IAAKiD,EAAKjD,IAAKC,MAAM,GAAD,OAAKoC,EAAUrE,KAAf,cAAyBiF,EAAKhD,QAE5K,OAAO,aACHH,IAAI,aACAC,SAAUsC,EAAUvC,IAAIC,SAASY,OAAO4C,IACrCD,IAEJD,IAIX,OAAQf,EAAOxE,MACX,IAAK,iBAGD,OAFAuE,EAAUrE,MAAQ,EAClBwF,QAAQ1D,IAAI,kBAAmBuC,GACxBW,EAAO,CAAChD,IAAK,UAAWC,MAAO,sBAG1C,IAAK,SAAU,OAAO+C,EAAOV,GAE7B,IAAK,YACD,IAAMe,EAAWd,EAAaS,EAAO,CAAChD,IAAK,UAAWC,MAAO,sBAAuB,YAC9EwD,EAAelB,EAAaF,EAAUnC,SAAU,gBAEtD,OAAO,aACHA,SAAS,aACLa,aAAc,IACX0C,IAEJJ,GAIX,IAAK,kBACD,IAAMA,EAAWd,EAAaS,EAAO,CAAChD,IAAK,UAAWC,MAAM,WAAD,OAAaqC,EAAOoB,MAAMpF,UAA1B,mBAAsD,YAC3GqF,EAAMtB,EAAUnC,SAChBI,EAAOqD,EAAIvD,MAAMkC,EAAOsB,WACxB9G,EAAiBwD,EAAKxD,eACtB2G,EAAelB,EAAaoB,EAAK,kBACjCE,EAAYvD,EAAKpD,MAClB4F,KAAI,SAACgB,EAAMvG,GAAP,MAA+B,SAAlBuG,EAAKtG,SAAsByD,EAAS1D,EAAGT,GAAkB,QAC1Ea,QAAO,SAAAoG,GAAC,MAAiB,kBAANA,GAAiBA,KACnCC,EAAetB,OAAOuB,OAAO,GAAI3B,EAAOoB,MAAO,CAACjH,OAAQoH,EAAU9G,KAAKC,MAAMD,KAAKE,SAAW4G,EAAUxG,WAE7G,OAAO,aACH6C,SAAS,aACLa,aAAc4C,EAAI5C,aAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEzF,MAAQ6D,EAAOoB,MAAMjF,OAAKkC,OAAOqD,IAC3EP,IAEJJ,GAIX,IAAK,kBACDG,QAAQ1D,IAAI,YACZuC,EAAUrE,MAAQ,EAClB,IAAMqF,EAAWd,EAAaS,EAAO,CAAChD,IAAK,UAAWC,MAAM,gBAAD,OAAkBqC,EAAOpB,MAAzB,OAAqC,YAC1FuC,EAAelB,EAAaF,EAAUnC,SAAU,gBACtD,OAAO,aACHA,SAAS,aACLa,aAAcsB,EAAUnC,SAASa,aAAa+B,KAAI,SAAAoB,GAAC,OAAIxB,OAAOuB,OAAO,GAAIC,EAAG,CAACC,YAAY,QACtFV,IAEJJ,GAIX,IAAK,kBACDhB,EAAUrE,MAAQ,EAClB,IAAMyF,EAAelB,EAAaF,EAAUnC,SAAU,eAGtD,OAAO,aACHA,SAAS,aACLkE,aAJY,GAKTX,IAEJV,GAIX,IAAK,oBAAqB,OA9GJ,WAA2B,IAA1BW,EAAyB,uDAAjBpB,EAAOoB,MAEtCrB,EAAUrE,MAAQ,EAClB,IAAMqG,EAAcX,GAAgBpB,EAAO+B,YACrCZ,EAAelB,EAAaF,EAAUnC,SAAU,8BAChDmD,EAAWd,EAAaS,EAAO,CAAChD,IAAK,OAAQC,MAAM,aAAD,OAAeoE,EAAY/F,UAA3B,OAA2C,YAC7F0F,EAAetB,OAAOuB,OAAO,GAAII,EAAa,CAACF,YAAY,IAEjE,OAAO,aACHjE,SAAS,aACLkE,aAAa,EACbrD,aAAcsB,EAAUnC,SAASa,aAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEzF,MAAQ4F,EAAY5F,OAAKqE,KAAI,SAAAoB,GAAC,OAAIxB,OAAOuB,OAAO,GAAIC,EAAG,CAACC,YAAY,OAASxD,OAAOqD,IAC7IP,IAEJJ,GAgG0BiB,GAEjC,IAAK,kBAGD,IAAM1G,EAAM0E,EAAO1E,IACb0C,EAAO+B,EAAUnC,SAASE,MAAMiC,EAAUnC,SAASC,MAAQ,GAC3DrD,EAAiBwD,EAAKxD,eALR,EAMHuF,EAAUpE,OAAOG,WAA1BzB,EANY,EAMZA,EAAGE,EANS,EAMTA,EACL0H,EAAa,SAAR3G,GAAkB,EAAY,UAARA,EAAkB,EAAI,EACjD4G,EAAa,OAAR5G,GAAgB,EAAY,SAARA,EAAiB,EAAI,EAC9C6G,EAAYzD,EAAQ,CAACrE,EAAGA,EAAI4H,EAAI1H,EAAGA,EAAI2H,GAAK1H,GAElD,GAA4B,SADTwD,EAAKpD,MAAMuH,GACfjH,SACX,OAAOwF,EAAO,CAAChD,IAAK,OAAQC,MAAO,wCAEvC,IAAMyE,EAAqBrC,EAAUnC,SAASa,aAAa+B,KAAI,gBAAErG,EAAF,EAAEA,OAAF,OAAcuE,EAAQvE,EAAQK,MAC7F,GAAI4H,EAAmBpD,QAAQmD,IAAc,EAAG,CAC5C,IAAME,EAActC,EAAUnC,SAASa,aAAa2D,EAAmBpD,QAAQmD,IACzEG,EAASvC,EAAUpE,OAAOI,UAAUV,QAAO,SAAAkH,GAAI,MAAkB,WAAdA,EAAK/G,MAAqB+G,EAAKtG,cAAY,GAC9FuG,EAAgB3D,EAAQyD,EAAOpG,QAC/BwF,EAAetB,OAAOuB,OAAO,GAAIU,EAAa,CAACR,YAAY,EAAM3E,GAAImF,EAAYnF,GAAKsF,GAAiB,EAAIH,EAAYnF,GAAKsF,EAAgB,IAC5I1B,EAAMY,EAAaxE,GAAK,EAAlB,yBAAwCmF,EAAYrG,WAAc0F,EAAae,aACrF1B,EAAWd,EAAaS,EAAO,CAAChD,IAAK,OAAQC,MAAOmD,IAAO,YAC3DK,EAAelB,EAAaF,EAAUnC,SAAU,gBAEtD,OAAO,aACHA,SAAS,aACLa,aAAcsB,EAAUnC,SAASa,aAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEzF,MAAQuF,EAAavF,OAAKkC,OAAOqD,EAAaxE,GAAK,EAAIwE,EAAe,KAC/HP,IAEJJ,GAGX,IAAMA,EAAWd,EAAaF,EAAW,UACnC2C,EAAazC,EAAaF,EAAUpE,OAAQ,cAElD,OAAO,aACHA,OAAO,aACHG,WAAY,CACRzB,EAAGA,EAAI4H,EACP1H,EAAGA,EAAI2H,IAERQ,IAEJ3B,GAIX,IAAK,WACD,GAA2B,QAAvBf,EAAO2C,YAAuB,CAC9B,IAAMtB,EAAMtB,EAAUnC,SAChBa,EAAe4C,EAAI5C,aACnB0C,EAAelB,EAAaoB,EAAK,gBACjCgB,EAAc5D,EAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEC,cAAY,GAErDS,EAASvC,EAAUpE,OAAOI,UAAUV,QAAO,SAAAkH,GAAI,MAAkB,WAAdA,EAAK/G,MAAqB+G,EAAKtG,cAAY,GAC9FuG,EAAgB3D,EAAQyD,EAAOpG,QAE/BwF,EAAetB,OAAOuB,OAAO,GAAIU,EAAa,CAACnF,GAAImF,EAAYnF,GAAKsF,GAAiB,EAAIH,EAAYnF,GAAKsF,EAAgB,IAC1H1B,EAAMY,EAAaxE,GAAK,EAAlB,yBAAwCwE,EAAa1F,UAArD,KAAoE0F,EAAae,aACvFG,EAAO,iBAAaN,EAAOpG,OAApB,gBAAkCsG,EAAlC,YACPzB,EAAWd,EAAaS,EAAO,CAAC,CAAChD,IAAK,OAAQC,MAAOmD,GAAM,CAACpD,IAAK,SAAUC,MAAOiF,KAAY,cAEpG,OAAO,aACHhF,SAAS,aACLa,aAAcA,EAAapD,QAAO,SAAAuG,GAAC,OAAKA,EAAEC,cAAYxD,OAAOqD,EAAaxE,GAAK,EAAIwE,EAAe,KAC/FP,IAEJJ,GAIP,IAAMA,EAAWd,EAAaF,EAAW,UACnC2C,EAAazC,EAAaF,EAAUpE,OAAQ,cAC5CkH,EAAiB5C,EAAaF,EAAUpE,OAAOsB,WAAY,MAEjE,OAAO,aACHtB,OAAO,aACHsB,WAAW,aACPC,GAAI6C,EAAUpE,OAAOsB,WAAWC,GAAK8C,EAAO8C,KACzCD,IAEJH,IAEJ3B,GAKf,IAAK,wBACDhB,EAAUrE,MAAQ,EAClB,IAAMqF,EAAWd,EAAaF,EAAW,aAEzC,OAAO,aACHgD,UAAmC,cAAxBhD,EAAUgD,UAA4B,KAAO,aACrDhC,GAIX,IAAK,mBACDhB,EAAUrE,MAAQ,EAClB,IAAMqF,GAAWd,EAAaF,EAAW,aAEzC,OAAO,aACHgD,UAAW,MACRhC,IAIX,IAAK,gBACDhB,EAAUrE,MAAQ,EAClB,IAAMqF,GAAWd,EAAaF,EAAW,aACnCgD,GAAoC,YAAxBhD,EAAUgD,UAA0B,KAAO,UAE7D,OAAO,aACHA,cACGhC,IAIX,IAAK,cACD,IAAMpD,GAAK,cAAUqC,EAAOgD,UAAUxH,KAA3B,gBAAuCwE,EAAOuC,KAAKvG,WAAnD,OAA+DgE,EAAOiD,OAAP,WAAoBjD,EAAOiD,OAAOC,KAAlC,gBAA8ClD,EAAOiD,OAAOjH,WAAc,GAAzI,KACL+E,GAAWd,EAAaS,EAAO,CAAChD,IAAK,OAAQC,WAAS,UACtD+E,GAAazC,EAAaF,EAAUpE,OAAQ,aAClD,OAAO,aACHA,OAAO,aACHI,UAAWiE,EAAOgD,UAAUG,WAAapD,EAAUpE,OAAOI,UAAUV,QAAO,SAAAkH,GAAI,OAAIA,EAAKpG,MAAQ6D,EAAOuC,KAAKpG,OAAO4D,EAAUpE,OAAOI,WACjI2G,KAEJ3B,IAIX,QAAS,MAAM,IAAI9C,MAAJ,qDAAwDC,KAAKC,UAAU6B,OAU/EoD,EANW,SAACC,GAAW,IAAD,EACMC,qBAAWxD,EAAkBrE,GADnC,mBAC1BsE,EAD0B,KACfwD,EADe,KAE3B5F,EAAQ6F,mBAAQ,iBAAM,CAACzD,EAAWwD,KAAoB,CAACxD,IAC7D,OAAO,kBAACL,EAAiB+D,SAAlB,eAA2B9F,MAAOA,GAAW0F,KCnQzCK,EAdE,WAAO,IAAD,EACW9D,IAArB2D,EADU,oBAOnB,OACI,6BACI,4BAAQI,QAPO,kBAAMJ,EAAkB,CAC3C7F,IAAK,WACLlC,KAAM,qBAKF,qBCwBGoI,EApCS,CACtB,cAAe,CACb5H,UAAW,cACX6H,SAAU,QACVC,UAAW,QACXC,SAAU,EACVC,eAAgB,MAChBtH,SAAU,MACVuH,kBAAmB,MACnBC,OAAQ,oGACRzB,aAAc,gDAEhB,WAAY,CACVzG,UAAW,WACX6H,SAAU,QACVC,UAAW,QACXC,SAAU,EACVC,eAAgB,EAChBtH,SAAU,EACVuH,kBAAmB,MACnBC,OAAQ,qEACRzB,aAAc,6CAEhB,WAAY,CACVzG,UAAW,WACX6H,SAAU,QACVC,UAAW,QACXC,SAAU,EACVC,eAAgB,EAChBtH,SAAU,EACVuH,kBAAmB,MACnBC,OAAQ,qEACRzB,aAAc,gCCjBH0B,EAfE,CACfC,KAAM,CACJP,SAAU,GACVQ,UAAW,GAEbC,MAAO,CACLT,SAAU,GACVQ,UAAW,GAEbE,OAAQ,CACNV,SAAU,GACVQ,UAAW,ICPTG,EAAS,kBAAsB,IAAhB/J,KAAKE,UAyBX8J,EAvBU,WAAkD,IAAjDC,EAAgD,uDAAhC,CAAC,UAAWC,EAAoB,uDAAN,EAC5DC,EAAgB,CACpBT,SAAUtF,EAAQ,UAEdgG,EAASF,EAAc,EAEvBG,EAAiBJ,EAAcjK,KAAKC,MAAMD,KAAKE,SAAW+J,EAAc3J,SACxEgK,EAAWnB,EAAgBkB,GAC3B3I,EAAMqI,IACNtH,EAAK2B,EAAQkG,EAASjB,WAAae,EACnCG,EAAQ9H,EACR+H,EAAOpG,EAAQkG,EAASd,mBAAqBY,EAASD,EAAcT,SAAWA,EAAS1J,KAAKC,MAAMD,KAAKE,SAAWwJ,EAASpJ,SAAW,KAEvImK,EAAkB,CACtBhI,KACA8H,QACA7I,MACA8I,QAGF,OAAO7E,OAAOuB,OAAO,GAAIoD,EAAUG,ICiDtBC,G,MArEK,WAAO,IAAD,EACMvF,IAArB2D,EADe,sBAEE6B,mBAAS,MAFX,mBAEjBhE,EAFiB,KAEViE,EAFU,OAGkBD,mBAAS,IAH3B,mBAGjBE,EAHiB,KAGEC,EAHF,KAMlBC,EAAc,kBAAMf,EAAiBa,EAAkBvK,OAAS,EAAIuK,EAAoBlF,OAAOE,KAAKsD,KAkBpG6B,EAAkB,WACtB,IAAMC,EAAWtE,GAAgBoE,IACjCjC,EAAkB,CAChB7F,IAvBQ,UAwBRlC,KAAM,kBACN4F,MAAOsE,EACPpE,UAAW,IAEb+D,EAAS,OAGLM,EAAkBvF,OAAOE,KAAKsD,GAAiBpD,KAAI,SAAAoB,GAAC,OACxD,kBAAC,WAAD,CAAUzF,IAAKyF,GACb,+BAAQA,GACR,2BACEpG,KAAK,WACLmC,MAAO2H,EAAkBtG,WAAa,EACtC2E,QAAS,kBAvBc,SAAC/B,GAC5B,IACMgE,GAD2C,IAAlCN,EAAkBtG,QAAQ4C,GACZ0D,EAAkBjH,OAAOuD,GAAK0D,EAAkBjK,QAAO,SAAAwK,GAAC,OAAIA,IAAMjE,KAC/F2D,EAAaK,GAoBME,CAAqBlE,UAK1C,OACE,yBAAKmE,UAAU,eACb,yBAAKA,UAAU,2BACb,4CAEF,yBAAKA,UAAU,wBACZJ,GAEH,yBAAKI,UAAU,OACb,4BAAQpC,QA/Cc,WAC1B,IAAM+B,EAAWF,IACjBjC,EAAkB,CAChB7F,IAPQ,UAQRlC,KAAM,SACNmC,MAAM,mBAAD,OAAqB+H,EAAS1J,aAErCqJ,EAASK,KAwCL,sBACA,4BAAQ/B,QAAS8B,GAAjB,4BAEF,yBAAKM,UAAU,mBACZ3E,GACC,oCACE,4BAAQuC,QAAS,kBAAM8B,MAAvB,qBC/DNO,EAAe,CACnB,EACA,EACA,EACA,GACA,GACA,GACA,IAkEaC,EA/DA,WAAO,IAAD,EACWrG,IAArB2D,EADU,sBAES6B,mBAAS,GAFlB,mBAEZc,EAFY,KAEJC,EAFI,OAGGf,mBAAS,MAHZ,mBAGZtG,EAHY,KAGPsH,EAHO,OAIGhB,mBAAS,GAJZ,mBAIZ7H,EAJY,KAIP8I,EAJO,OAKWjB,mBAAS,GALpB,mBAKZkB,EALY,KAKHC,EALG,KAuBbC,EAAWR,EAAaxF,KAAI,SAAApB,GAChC,IAAMqH,EAAM,WAAOrH,GACnB,OACE,4BACEjD,IAAKiD,EACLuE,QAAS,kBAjBS,SAACvE,GAAD,OAAOgH,EAAOhH,GAiBjBsH,CAAgBD,IAC/BV,UAAS,aAAQU,IAAW3H,EAAM,UAAY,KAE7C2H,MAKDE,EAAU,UAAMT,GAAN,OAAepH,GAAf,OAAqBvB,EAAM,EAAN,WAAcA,GAAQ,IAE3D,OACE,yBAAKwI,UAAU,UACb,yBAAKA,UAAU,2BACb,uCAEF,yBAAKA,UAAU,qBACb,2BAAOa,SAnCmB,SAAC,GAAD,IAAE3D,EAAF,EAAEA,OAAF,OAAckD,EAAUlD,EAAOtF,QAmCfA,MAAOuI,KAEnD,yBAAKH,UAAU,qBACZS,GAEH,yBAAKT,UAAU,aAAf,eAEE,2BAAOvK,KAAK,SAASoL,SA5CI,SAAC,GAAD,IAAE3D,EAAF,EAAEA,OAAF,OAAcoD,EAAOpD,EAAOtF,QA4CEA,MAAOJ,KAEhE,4BAAQoG,QAxCO,WACjB,IAAMkD,EAAahI,EAAQ8H,GAC3BpD,EAAkB,CAChB7F,IAAK,UACLlC,KAAM,SACNmC,MAAM,WAAD,OAAagJ,EAAb,uBAAsCE,KAE7CN,EAAWM,IAiCoB/F,IAAG,2BAAsB6F,IAAtD,YACCL,GACC,yBAAKP,UAAU,cAAf,WACWY,EADX,OAC2BL,KC9BpBQ,EArCM,WAAO,IAAD,EACgBlH,IADhB,mBAChBG,EADgB,KACLwD,EADK,KAGjB7F,EAAM,eAiBLe,EADYsB,EAAZnC,SACAa,aACP,OACI,yBAAKsH,UAAU,gBACVtH,EAAa1D,OAAS,GACnB,4BAAQ4I,QAnBI,WACpBJ,EAAkB,CACd7F,MACAlC,KAAM,gBAgBF,cAIHiD,EAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEmF,cAAYhM,OAAS,GAC7C,4BAAQ4I,QAjBM,WACtBJ,EAAkB,CACd7F,MACAlC,KAAM,kBAcF,kBCVDwL,G,MAdC,WAAO,IAAD,EACEpH,IAEdqH,EAAmC,YAHvB,oBAGSlE,UAC3B,OACI,yBAAKgD,UAAS,iBAAYkB,EAAW,UAAY,KAC7C,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,gBCLGC,G,MARM,WACjB,OACI,yBAAKnB,UAAU,yBACX,yBAAKoB,IAAKC,IAAQC,IAAI,qBCUnBC,G,MAbK,WAAO,IAAD,EACF1H,IAEd2H,EAHgB,oBAGQ5L,OAAOsB,WACrC,OACI,yBAAK8I,UAAU,wBACX,yBAAKA,UAAU,wBACV3F,OAAOE,KAAKiH,GAAa/G,KAAI,SAAAqF,GAAC,OAAI,yBAAK1J,IAAK0J,GAAIA,EAAd,KAAmB0B,EAAY1B,WCGnE2B,G,MATO,WAClB,OACI,yBAAKzB,UAAU,kBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCMG0B,EAbC,SAAC,GAAgB,IAAfhK,EAAc,EAAdA,SACd,OACI,yBAAKsI,UAAU,4BACVtI,EAAS+C,KAAI,SAACkH,EAAGzM,GAAJ,OACV,yBAAKkB,IAAKuL,EAAE/J,MAAMU,OAAOpD,IACrB,8BAAOyM,EAAE/J,aCMdgK,EAXO,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,eAAgBC,EAA4C,EAA5CA,gBAAiBC,EAA2B,EAA3BA,sBACrD,OACI,yBAAK/B,UAAU,4BACX,yBAAKA,UAAU,6BACX,4BAAQA,UAAS,wBAAuC,IAAnB6B,GAAwBC,IAAoBD,EAAiB,EAAK,YAAc,IAAMjE,QAAS,kBAAMmE,EAAsB,KAAhK,UACA,4BAAQ/B,UAAS,wBAAuC,IAApB8B,EAAwB,YAAc,IAAMlE,QAAS,kBAAMmE,GAAuB,KAAtH,aCQDC,EAbO,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,kBACtCC,EAAgBF,EAAazH,KAAI,SAAAiB,GAAC,OACpC,4BAAQsE,UAAS,oBAAeiC,IAAavG,EAAI,UAAY,IAAMtF,IAAKsF,EAAGkC,QAAS,kBAAMuE,EAAkBzG,KACxG,8BAAOA,OAGf,OACI,yBAAKsE,UAAU,mBACVoC,ICkDEC,G,MArDH,WAAO,IAAD,EACMxI,IAAbG,EADO,sBAEkBqF,mBAAS,WAF3B,mBAEP4C,EAFO,KAEGK,EAFH,OAGgCjD,mBAAS,GAHzC,mBAGPyC,EAHO,KAGUS,EAHV,KAKRL,EAAezE,mBAAQ,WACzB,OAAOzD,EAAUvC,IAAIC,SAChB+C,KAAI,qBAAE9C,OACN6B,QAAO,SAACC,EAAKC,GACV,OAAID,EAAIR,QAAQS,IAAS,EAAUD,EACvBA,EAAInB,OAAO,KAAKA,OAAOoB,MAEtCN,MAAM,OACR,CAACY,EAAUvC,IAAIC,WAOhBA,EAAWsC,EAAUvC,IAAIC,SACzB8K,EAAgC,YAAbP,EAAyBvK,EAAWA,EAASpC,QAAO,qBAAEqC,MAAiBsK,KAQ1FQ,EAAWD,EAAiBxN,OAAS8M,EACrCY,EAAWD,GARE,GAQuBA,EARvB,GAQ+C,EAC5DE,EAAcH,EAAiBI,MAAMF,EAAUD,GAErD,OACI,yBAAKzC,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CACItI,SAAUiL,IAEd,kBAAC,EAAD,CACId,eAAgBW,EAAiBxN,OACjC+M,sBAjBQ,SAAChF,GACjB+E,EAAkB/E,EAAM,GAAK+E,EAAkB/E,EAAMyF,EAAiBxN,OAAS,GACnFuN,EAAmBxF,EAAM+E,EAAkB/E,EAAM,OAkB7C,kBAAC,EAAD,CACIkF,SAAUA,EACVE,kBA/Bc,SAACzG,GACvB6G,EAAmB,GACnBD,EAAY5G,IA8BJwG,aAAcA,OCxCfW,G,MATH,WACR,OACI,yBAAK7C,UAAU,oBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCTN8C,EAAU,CACZrN,KAAM,OACN2H,YAAY,GA8BD2F,EAtBQ,CACnBxG,OAAQ,CACJyG,eAAgB,CACZ,CACIvN,KAAM,SACN2H,YAAY,GAHJ,eAPP,CACb3H,KAAM,QACN2H,YAAY,IAKQ,eAMR0F,KAGZG,OAAQ,CACJD,eAAgB,CACZ,CACIvN,KAAM,QACN2H,YAAY,GAHJ,eAKR0F,MCaDI,G,MAnCW,WAAO,IAAD,EACWrJ,IADX,mBACrBG,EADqB,KACVwD,EADU,OAEM6B,qBAFN,mBAErB8D,EAFqB,KAEVC,EAFU,KAWtBpN,EAAYgE,EAAUpE,OAAOI,UAAUyE,KAAI,SAAC+B,EAAMtH,GAAP,OAC7C,yBAAKkB,IAAKoG,EAAKvG,UAAUqC,OAAOpD,GAAI8K,UAAU,iBAAiBpC,QAAS,kBAAMwF,EAAa5G,KACtFA,EAAKvG,cAGRoN,EAAeF,GAAaA,EAAUG,eAAe,QAAUtJ,EAAUpE,OAAOI,UAAUV,QAAO,SAAAkH,GAAI,OAAIA,EAAKpG,MAAQ+M,EAAU/M,OAAKpB,OAAS,EAEpJ,OACI,yBAAKgL,UAAU,sBACVhK,EACAqN,GACG,yBAAKrD,UAAU,wBACX,mCAASmD,EAAUlN,WACnB,yBAAK+J,UAAU,0BACV+C,EAAeI,EAAU1N,MAAMuN,eAAevI,KAAI,SAAA8I,GAAC,OAChD,4BAAQnN,IAAKmN,EAAE9N,KAAMmI,QAAS,kBAtBjBJ,EAAkB,CACnD7F,IAAK,YACLlC,KAAM,cACN+G,KAAM2G,EACNlG,UAkBsEsG,MAAKA,EAAE9N,cChBtE+N,G,MAVO,WAAO,IAAD,EACJ3J,IAAbG,EADiB,oBAGxB,OACI,yBAAKgG,UAAS,wBAA2C,cAAxBhG,EAAUgD,UAA4B,UAAW,KACrD,cAAxBhD,EAAUgD,WAA6B,kBAAC,EAAD,SCQrCyG,G,MAdG,WAAO,IAAD,EACA5J,IAAbG,EADa,oBAGd0J,EAAY1J,EAAUnC,SAASa,aAAa1D,OAC5C2O,EAAU3J,EAAUvC,IAAIC,SAASpC,QAAO,SAAAqM,GAAC,MAAc,YAAVA,EAAEhK,OAC/CiM,EAAaD,EAAUA,EAAQA,EAAQ3O,OAAS,GAAK,KAC3D,OACI,yBAAKgL,UAAU,2BACX,gDAAsB0D,GACtB,6BAAME,GAAcA,EAAWhM,UCT5BiM,EAFI,SAAC,GAAD,IAAEC,EAAF,EAAEA,cAAF,OAAqB,yBAAK9D,UAAS,SAAY+D,MAAOD,KCc1DE,EAbI,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aACtBJ,EAAgB,CAClBK,WAAW,GAAD,OAAKD,EAAa5P,EAAlB,cAAyB4P,EAAa5P,EAAI,GACpD8P,QAAQ,GAAD,OAAKF,EAAa1P,EAAlB,cAAyB0P,EAAa1P,EAAI,IAGrD,OACI,yBAAKwL,UAAU,wBAAwB+D,MAAOE,GAC1C,kBAAC,EAAD,CAAYC,aAAcA,EAAcJ,cAAeA,MCIpDO,G,MAZQ,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,UAE7BC,EAAW,CACfC,MAFS,UAAMH,EAAaC,EAAY,IAA/B,MAIX,OACE,yBAAKvE,UAAU,cACb,0BAAM+D,MAAOS,OCCJE,EARG,SAAC,GAAqC,IAApCrJ,EAAmC,EAAnCA,MAAOyI,EAA4B,EAA5BA,cAAelG,EAAa,EAAbA,QACtC,OACI,yBAAKA,QAASA,EAASoC,UAAS,gBAAW3E,EAAMpF,UAAU0O,QAAQ,MAAO,KAAKC,eAA/C,OAA+DvJ,EAAMS,WAAa,eAAiB,IAAMiI,MAAOD,GAC5I,kBAAC,EAAD,CAAgBQ,WAAYjJ,EAAMlE,GAAIoN,UAAWlJ,EAAM4D,UC2BpD4F,G,MA7BG,SAAC,GAAwC,IAAvCZ,EAAsC,EAAtCA,UAAWvL,EAA2B,EAA3BA,aAAckF,EAAa,EAAbA,QACzC,OACI,yBAAKoC,UAAU,uBAAuB+D,MAAOE,GACxCvL,EAAa1D,OAAS,GACnB0D,EAAa+B,KAAI,SAAAY,GACb,IAAMyJ,EAAqB,CACvBX,WAAW,GAAD,OAAK9I,EAAMjH,OAAOE,EAAlB,cAAyB+G,EAAMjH,OAAOE,EAAI,GACpD8P,QAAQ,GAAD,OAAK/I,EAAMjH,OAAOI,EAAlB,cAAyB6G,EAAMjH,OAAOI,EAAI,IAE/CuQ,EAAiB,CACnBpN,IAAK,YACLlC,KAAM,oBACN4F,SAGJ,OACI,kBAAC,EAAD,CACIjF,IAAK,GAAGkC,OAAO+C,EAAMjH,OAAOE,GAAGgE,OAAO+C,EAAMjH,OAAOI,GACnDoJ,QAAS,kBAAMA,EAAQmH,IACvB1J,MAAOA,EACPyI,cAAegB,UCf5BE,EAPF,SAAC,GAAyB,IAAxB7P,EAAuB,EAAvBA,SAAUyI,EAAa,EAAbA,QACrB,OACI,yBAAKoC,UAAS,mBAAc7K,GAAYyI,QAASA,KC4B1CqH,EA7BE,SAAC,GAAyC,IAAxCpQ,EAAuC,EAAvCA,MAAOoP,EAAgC,EAAhCA,UAAWiB,EAAqB,EAArBA,gBAC3BnP,EAAa0H,mBAAQ,WAOvB,OAAO5I,EAAM4F,KAAI,WAAavF,GAAO,IAAlBC,EAAiB,EAAjBA,SACf,OACI,kBAAC,EAAD,CACIiB,IAAKlB,EACLC,SAAUA,EACVyI,QAAS,kBAXUsH,EAAgB,CAC3CvN,IAAK,OACLlC,KAAM,kBACNoD,MAQmC3D,YAIxC,CACCL,EACAqQ,IAGJ,OACI,yBAAKlF,UAAU,sBAAsB+D,MAAOE,GACvClO,IC+DEoP,G,MAjFF,SAAC,GAAiB,IAAhB5J,EAAe,EAAfA,UAAe,EACa1B,IADb,mBACnBG,EADmB,KACRwD,EADQ,KAK1B4H,qBAAU,WACN,IAIMC,EAAwB,SAACC,GAAD,OAAgB9H,EAAkB,CAC5D7F,IARI,OASJlC,KAAM6P,EAAa,mBAAqB,2BAqBtCC,EAAuB,CACzB,GACA,GACA,GACA,IAGJC,OAAOC,iBAAiB,WAAW,SAACC,GA1BX,IAACC,EA2BlBD,EAAEE,aAA6B,MAAdF,EAAEG,UACnBN,EAAqBtM,QAAQyM,EAAEG,UAAY,IA5BzBF,EA4B6CD,EAAEG,QAhBrErI,EAAkB,CACd7F,IAxBA,OAyBAlC,KAAM,kBACNF,IAdgB,WAChB,OAAQoQ,GACJ,KAAK,GAAI,MAAO,OAChB,KAAK,GAAI,MAAO,KAChB,KAAK,GAAI,MAAO,QAChB,KAAK,GAAI,MAAO,OAChB,QACI,MAAM,IAAIzN,MAAJ,mCAAsCC,KAAKC,UAAUuN,MAO9DG,MAcS,KAAdJ,EAAEG,SAAgBR,IACJ,KAAdK,EAAEG,SAAgBR,GAAsB,GAC1B,KAAdK,EAAEG,SAvCwBrI,EAAkB,CAChD7F,IAJI,OAKJlC,KAAM,wBAuCX,CAAC+H,IAEJ,IAAMvF,EAAO+B,EAAUnC,SAASE,MAAMwD,GAChC9G,EAAiBwD,EAAKxD,eACtBI,EAAQoD,EAAKpD,MACboP,EAAY,CACd8B,oBAAoB,UAAD,OAAYtR,EAAZ,aAvDV,MAuDU,KACnBuR,iBAAiB,UAAD,OAAYvR,EAAZ,aAxDP,MAwDO,MAEdyP,EAAelK,EAAUpE,OAAOG,WAChC2C,EAAesB,EAAUnC,SAASa,aAClCuD,EAAoBuB,EAE1B,OACI,yBAAKwC,UAAU,QACX,kBAAC,EAAD,CACIiE,UAAWA,EACXC,aAAcA,IAElB,kBAAC,EAAD,CACID,UAAWA,EACXvL,aAAcA,EACdkF,QAAS3B,IAEb,kBAAC,EAAD,CACIgI,UAAWA,EACXpP,MAAOA,EACP0G,UAAWA,EACX2J,gBAAiB1H,OCvElByI,I,MATO,WAElB,OACI,yBAAKjG,UAAU,kBACX,kBAAC,EAAD,CAAMzE,UAHI,OCSP2K,I,MATK,WAChB,OACI,yBAAKlG,UAAU,gBACX,kBAAC,GAAD,MACA,kBAAC,EAAD,SCLNmG,I,MAAoB,sDAiBXC,GAfG,WAAO,IAAD,EACAvM,IAEdwM,EAHc,oBAGaxO,SAASa,aAAapD,QAAO,SAAAuG,GAAC,OAAIA,EAAEC,cAAY,GACjF,OACI,yBAAKkE,UAAU,2BACVqG,GACG,yBAAKrG,UAAU,2CACV3F,OAAOE,KAAK8L,GAAgB/Q,QAAO,SAAAgR,GAAC,OAAIH,GAAkB3L,KAAK8L,MAAI7L,KAAI,SAAA6L,GAAC,OAAI,yBAAKlQ,IAAKkQ,GAAG,2BAAIA,EAAJ,KAAb,IAA0BnO,KAAKC,UAAUiO,EAAeC,WCVnJC,I,MAAmB,WACrB,OACI,yBAAKvG,UAAU,6BACX,kDAGA,6CAGA,wDAkBGwG,GAXG,WACd,OACI,yBAAKxG,UAAU,cACX,yBAAKA,UAAU,oBACX,kBAAC,GAAD,MACA,kBAAC,GAAD,SCFDyG,I,MAdF,WACT,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,yBAAKzG,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,U,MCLD0G,OARf,WACE,OACE,yBAAK1G,UAAU,OACb,kBAAC,GAAD,QCPc2G,QACW,cAA7BnB,OAAO3N,SAAS+O,UACe,UAA7BpB,OAAO3N,SAAS+O,UAChBpB,OAAO3N,SAAS+O,SAASC,MACvB,2DCENC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2ade066.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rl_avatar.a75d3f2a.svg\";","const CONSTANTS = {\r\n    MAP_DIMENSIONALITY: 80,\r\n    ROOM_DIMENSIONALITY_MIN: 25,\r\n    ROOM_DIMENSIONALITY_MAX: 25\r\n};\r\n\r\nconst generateRoom = (coords) => {\r\n    const getAvailWidth = () => CONSTANTS.MAP_DIMENSIONALITY - coords.x;\r\n    const getAvailHeight = () => CONSTANTS.MAP_DIMENSIONALITY - coords.y;\r\n    if (getAvailHeight() < CONSTANTS.ROOM_DIMENSIONALITY_MIN || getAvailWidth() < CONSTANTS.ROOM_DIMENSIONALITY_MIN) return null;\r\n    \r\n    const id = 0; //increment\r\n    const type = 'none'; //develop - could be patterns of room tiles/different room building algorithm (none|swarm|pit|maze|shrine|...)\r\n    const dimensionality = Math.floor(Math.random() * (CONSTANTS.ROOM_DIMENSIONALITY_MAX + 1 - CONSTANTS.ROOM_DIMENSIONALITY_MIN) + CONSTANTS.ROOM_DIMENSIONALITY_MIN);\r\n    \r\n    const isEdge = (i) => i <= dimensionality || i % dimensionality === 0 || i % dimensionality === (dimensionality - 1) || i >= (dimensionality ** 2) - dimensionality;\r\n\r\n    const tiles = Array.from({length: dimensionality ** 2}, (_, i) => { //simple static version - returns array of singletons (AKA room with walls on outside and empty tiles within)\r\n        const tileType = isEdge(i) ? 'wall' : 'none';\r\n        \r\n        return {\r\n            tileType\r\n        };\r\n    });\r\n\r\n    const tunnelDirections = [\r\n        getAvailHeight() >= CONSTANTS.ROOM_DIMENSIONALITY_MIN ? 'down' : null,\r\n        getAvailWidth() >= CONSTANTS.ROOM_DIMENSIONALITY_MIN ? 'right' : null\r\n    ].filter(dir => dir !== null);\r\n\r\n    return {\r\n        id,\r\n        type,\r\n        dimensionality,\r\n        tiles,\r\n        tunnelDirections\r\n    };\r\n}\r\n\r\nconst generateMap = () => {\r\n    const initCoords = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    const generateRooms = (coords) => {\r\n        const room = generateRoom(coords);\r\n        if (!room) return;\r\n        else {\r\n            const dir = room.tunnelDirections[Math.floor(Math.random() * room.tunnelDirections.length)]; //improve\r\n            if (!dir || room.tunnelDirections.length === 0) throw new Error(`dir and room.tunnelDirections must have valid values: ${JSON.stringify(dir)} ${JSON.stringify(room.tunnelDirections)}`);\r\n            const nextCoords = {\r\n                x: dir === 'right' ? coords.x + room.dimensionality : coords.x,\r\n                y: dir === 'down' ? coords.y + room.dimensionality : coords.y\r\n            };\r\n            return [].concat(room).concat(generateRooms(nextCoords)).filter(r => r !== undefined);\r\n        }\r\n    }\r\n\r\n    return generateRooms(initCoords);\r\n}\r\n\r\nexport default generateMap;\r\nexport { generateRoom };","import initPlayerStats from './initPlayerStats';\r\nimport generateMap from '../utilityLambdas/generateMap';\r\n\r\nconst initGameState = {\r\n    turn: 0,\r\n    player: initPlayerStats,\r\n    log: {\r\n        messages: [{\r\n            ctx: 'general',\r\n            value: 'Started game.'\r\n        }]\r\n    },\r\n    location: {\r\n        level: 1,\r\n        rooms: generateMap(),\r\n        nearbyBeasts: [] //beasts placed within available space in room on generation, or on add to nearbyBeasts (AKA beast entering the room)\r\n    }\r\n};\r\n\r\nexport default initGameState;","const samplePlayerStats = {\r\n    levelCoords: {\r\n        roomId: 0 //\r\n    },\r\n    roomCoords: {\r\n        x: 1,\r\n        y: 2\r\n    },\r\n    inventory: [{\r\n        type: 'weapon',\r\n        baseTitle: 'Spear',\r\n        isEquipped: true,\r\n        damage: '1d4',\r\n        key: 1001, //arbitrary - improve\r\n        proximity: [\r\n            'melee',\r\n            'ranged'\r\n        ],\r\n        equippedBy: 'hand',\r\n        range: '20ft',\r\n        rangeMod: '1d4',\r\n        description: 'Old and scraggly, you picked this up from your dead father\\'s corpse. He didn\\'t seem to mind.'\r\n    },\r\n    {\r\n        type: 'potion',\r\n        key: 1002, //arbitrary - improve\r\n        baseTitle: 'Absolve Corruption I',\r\n        proximity: 'ranged',\r\n        rangeMod: '1d4',\r\n        equippedBy: 'hand',\r\n        description: 'Smells a bit like old cheese mixed with your gym socks.'\r\n    }],\r\n    baseStats: {\r\n        //modify only with atypical events\r\n        strength: 1,\r\n        agility: 1,\r\n        constitution: 1,\r\n        perception: 1,\r\n        wisdom: 1,\r\n        intelligence: 1,\r\n        savingThrow: '1d8'\r\n    },\r\n    vitalStats: {\r\n        //modify with typical events\r\n        hp: 10,\r\n        sp: 0,\r\n        xp: 0\r\n    },\r\n    corruption: [\r\n        {\r\n            type: '',\r\n            description: '',\r\n            statMod: 'perception',\r\n            mod: -1\r\n        }\r\n    ]\r\n};\r\n\r\nexport default samplePlayerStats;","const toCoords = (index, dimensionality) => ({\r\n    x: index % dimensionality,\r\n    y: Math.floor(index / dimensionality)\r\n});\r\n\r\nconst toIndex = (coords, dimensionality) => coords.y * dimensionality + coords.x;\r\n\r\nexport default toCoords;\r\nexport { toIndex };","const rollDie = (die) => {\r\n  //extend to allow multiple dice to be rolled\r\n  if (die === 0) return 0;\r\n  const hazMod = die.indexOf('+') > -1;\r\n  const n = Number(die.split('')[0]);\r\n  const d = Number(hazMod ? die.split('d')[1].split('+')[0] : die.split('d')[1]);\r\n  const mod = hazMod ? Number(die.split('+')[1]) : 0;\r\n  const getRoll = () => Math.ceil(Math.random() * d);\r\n  const reducedVal = Array.from({length: n}, _ => getRoll())\r\n    .reduce((acc, curr) => acc + curr)\r\n    + mod;\r\n  return reducedVal > 0 ? reducedVal : 0;\r\n}\r\n\r\nexport default rollDie;","import React, { createContext, useContext, useReducer, useMemo } from 'react';\r\nimport initGameState from '../initModels/initGameState';\r\nimport toCoords, { toIndex } from '../utilityLambdas/toCoords';\r\nimport rollDie from '../utilityLambdas/rollDie';\r\n\r\nconst GameStateContext = createContext();\r\n\r\nconst useGameState = () => {\r\n    const ctx = useContext(GameStateContext);\r\n    if (!ctx) {\r\n        throw new Error(`must use within a ContextProvider`);\r\n    }\r\n    return ctx;\r\n}\r\n\r\nconst gameStateReducer = (gameState, action) => {\r\n    gameState.turn += 1 ; //find a performant way to do this without mutation\r\n    const filteredRest = (obj, filterKey) => Object.fromEntries(\r\n        Object.keys(obj)\r\n          .filter(key => !filterKey.test(key))\r\n          .map(key => [key, obj[key]])\r\n        );\r\n    \r\n    const gameRestFromLocation = filteredRest(gameState, /location/);\r\n    \r\n    const handleTargetBeast = (beast = action.beast) => {\r\n        //if (!beast) throw new Error(`Must supply valid beast obj in handleTargetBeast`);\r\n        gameState.turn -= 1;\r\n        const targetBeast = beast ? beast : action.targetBeast;\r\n        const locationRest = filteredRest(gameState.location, /(nearbyBeasts|targetState)/);\r\n        const gameRest = filteredRest(addLog({ctx: 'room', value: `Targeting ${targetBeast.baseTitle}.`}), /location/);\r\n        const updatedBeast = Object.assign({}, targetBeast, {isTargeted: true});\r\n        \r\n        return {\r\n            location: {\r\n                targetState: false,\r\n                nearbyBeasts: gameState.location.nearbyBeasts.filter(b => b.key !== targetBeast.key).map(b => Object.assign({}, b, {isTargeted: false})).concat(updatedBeast),\r\n                ...locationRest\r\n            },\r\n            ...gameRest\r\n        }\r\n    }\r\n\r\n    const addLog = (msgs) => {\r\n        if (!msgs) throw new Error('Must include msgs');\r\n        if (Array.isArray(msgs)) {\r\n            msgs.forEach(msg => {\r\n                if (!msg.ctx) throw new Error(`You must provide context in ${JSON.stringify(msg)}`);\r\n            });\r\n        }\r\n        else if (!msgs.ctx)  throw new Error(`You must provide context in ${JSON.stringify(msgs)}`);\r\n        const gameRest = filteredRest(gameState, /log/);\r\n        const logRest = filteredRest(gameState.log, /messages/);\r\n        \r\n        const formattedMsgs = Array.isArray(msgs) ? msgs.map(({ctx, value}) => ({ctx, value: `${gameState.turn} : ${value}`})) : {ctx: msgs.ctx, value: `${gameState.turn} : ${msgs.value}`};\r\n        \r\n        return {\r\n            log: {\r\n                messages: gameState.log.messages.concat(formattedMsgs),\r\n                ...logRest\r\n            },\r\n            ...gameRest\r\n        };\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'printGameState': {\r\n            gameState.turn -= 1\r\n            console.log('print gameState', gameState);\r\n            return addLog({ctx: 'console', value: 'Printed gameState'});\r\n        }\r\n\r\n        case 'addLog': return addLog(action);\r\n\r\n        case 'clearRoom': {\r\n            const gameRest = filteredRest(addLog({ctx: 'console', value: 'Cleared the room.'}), /location/);\r\n            const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n            \r\n            return {\r\n                location: {\r\n                    nearbyBeasts: [],\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'pushBeastToRoom': {\r\n            const gameRest = filteredRest(addLog({ctx: 'console', value: `Pushing ${action.beast.baseTitle} to the room.`}), /location/);\r\n            const loc = gameState.location;\r\n            const room = loc.rooms[action.roomIndex];\r\n            const dimensionality = room.dimensionality;\r\n            const locationRest = filteredRest(loc, /(nearbyBeasts)/);\r\n            const openTiles = room.tiles\r\n                .map((tile, i) => tile.tileType === 'none' ? toCoords(i, dimensionality) : null) //improve - need to check if beast or player is on tile as well\r\n                .filter(t => typeof t === 'object' ? t : false);\r\n            const updatedBeast = Object.assign({}, action.beast, {coords: openTiles[Math.floor(Math.random() * openTiles.length)]}); //extend - allow to check loc.rooms[loc.level - 1].beastGenerationRules\r\n            \r\n            return {\r\n                location: {\r\n                    nearbyBeasts: loc.nearbyBeasts.filter(b => b.key !== action.beast.key).concat(updatedBeast),\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'handleClickTile': {\r\n            console.log('handleCT');\r\n            gameState.turn -= 1; //hack\r\n            const gameRest = filteredRest(addLog({ctx: 'roomHUD', value: `Clicked tile ${action.index}.`}), /location/);\r\n            const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n            return {\r\n                location: {\r\n                    nearbyBeasts: gameState.location.nearbyBeasts.map(b => Object.assign({}, b, {isTargeted: false})),\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'openTargetBeast': {\r\n            gameState.turn -= 1\r\n            const locationRest = filteredRest(gameState.location, /targetState/);\r\n            const targetState = true;\r\n            \r\n            return {\r\n                location: {\r\n                    targetState,\r\n                    ...locationRest\r\n                },\r\n                ...gameRestFromLocation\r\n            };\r\n        }\r\n\r\n        case 'handleTargetBeast': return handleTargetBeast();\r\n\r\n        case 'handleMoveActor': {\r\n            //assume player for first iteration to test handlers\r\n            //const actor = 'player';\r\n            const dir = action.dir;\r\n            const room = gameState.location.rooms[gameState.location.level - 1];\r\n            const dimensionality = room.dimensionality;\r\n            const { x, y } = gameState.player.roomCoords;\r\n            const dX = dir === 'left' ? -1 : dir === 'right' ? 1 : 0;\r\n            const dY = dir === 'up' ? -1 : dir === 'down' ? 1 : 0;\r\n            const tileIndex = toIndex({x: x + dX, y: y + dY}, dimensionality);\r\n            const targetTile = room.tiles[tileIndex];\r\n            if (targetTile.tileType === 'wall') {\r\n                return addLog({ctx: 'room', value: 'You kick the wall out of spite. Ow.'});\r\n            }\r\n            const nearbyBeastsCoords = gameState.location.nearbyBeasts.map(({coords}) => toIndex(coords, dimensionality));\r\n            if (nearbyBeastsCoords.indexOf(tileIndex) > -1) {\r\n                const beastTarget = gameState.location.nearbyBeasts[nearbyBeastsCoords.indexOf(tileIndex)];\r\n                const weapon = gameState.player.inventory.filter(item => item.type === 'weapon' && item.isEquipped)[0];\r\n                const amtFromAttack = rollDie(weapon.damage);\r\n                const updatedBeast = Object.assign({}, beastTarget, {isTargeted: true, hp: beastTarget.hp - amtFromAttack >= 0 ? beastTarget.hp - amtFromAttack : 0});\r\n                const msg = updatedBeast.hp > 0 ? `You attack the ${beastTarget.baseTitle}` : updatedBeast.dyingMessage;\r\n                const gameRest = filteredRest(addLog({ctx: 'room', value: msg}), /location/);\r\n                const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n\r\n                return {\r\n                    location: {\r\n                        nearbyBeasts: gameState.location.nearbyBeasts.filter(b => b.key !== updatedBeast.key).concat(updatedBeast.hp > 0 ? updatedBeast : []),\r\n                        ...locationRest\r\n                    },\r\n                    ...gameRest\r\n                };\r\n            }\r\n            const gameRest = filteredRest(gameState, /player/);\r\n            const playerRest = filteredRest(gameState.player, /roomCoords/);\r\n           \r\n            return {\r\n                player: {\r\n                    roomCoords: {\r\n                        x: x + dX,\r\n                        y: y + dY\r\n                    },\r\n                    ...playerRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'adjustHP': { //consider modifying to 'adjustStat'\r\n            if (action.targetActor === 'npc') {\r\n                const loc = gameState.location;\r\n                const nearbyBeasts = loc.nearbyBeasts;\r\n                const locationRest = filteredRest(loc, /nearbyBeasts/);\r\n                const beastTarget = nearbyBeasts.filter(b => b.isTargeted)[0]; //extend to allow looping to damage/apply damage to other creatures (or consider one attack per beast in single dispatch call)\r\n                \r\n                const weapon = gameState.player.inventory.filter(item => item.type === 'weapon' && item.isEquipped)[0];\r\n                const amtFromAttack = rollDie(weapon.damage);\r\n                \r\n                const updatedBeast = Object.assign({}, beastTarget, {hp: beastTarget.hp - amtFromAttack >= 0 ? beastTarget.hp - amtFromAttack : 0});\r\n                const msg = updatedBeast.hp > 0 ? `You attack the ${updatedBeast.baseTitle}.` : updatedBeast.dyingMessage;\r\n                const rollMsg = `Rolled ${weapon.damage} for ${amtFromAttack} damage.`;\r\n                const gameRest = filteredRest(addLog([{ctx: 'room', value: msg}, {ctx: 'roller', value: rollMsg}]), /(location)/);\r\n                \r\n                return {\r\n                    location: {\r\n                        nearbyBeasts: nearbyBeasts.filter(b => !b.isTargeted).concat(updatedBeast.hp > 0 ? updatedBeast : []),\r\n                        ...locationRest\r\n                    },\r\n                    ...gameRest\r\n                };\r\n            }\r\n            else {\r\n                const gameRest = filteredRest(gameState, /player/);\r\n                const playerRest = filteredRest(gameState.player, /vitalStats/);\r\n                const vitalStatsRest = filteredRest(gameState.player.vitalStats, /hp/);\r\n                \r\n                return {\r\n                    player: {\r\n                        vitalStats: {\r\n                            hp: gameState.player.vitalStats.hp + action.amt,\r\n                            ...vitalStatsRest\r\n                        },\r\n                        ...playerRest\r\n                    },\r\n                    ...gameRest\r\n                }\r\n            }\r\n        }\r\n\r\n        case 'handleToggleInventory': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            \r\n            return {\r\n                focusMode: gameState.focusMode === 'inventory' ? null : 'inventory',\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'handleClosePanel': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            \r\n            return {\r\n                focusMode: null,\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'toggleConsole': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            const focusMode = gameState.focusMode === 'console' ? null : 'console'\r\n            \r\n            return {\r\n                focusMode,\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'applyAction': {\r\n            const value = `You ${action.itmAction.type} the ${action.item.baseTitle}${action.target ? ` ${action.target.verb} the ${action.target.baseTitle}` : ''}.`;\r\n            const gameRest = filteredRest(addLog({ctx: 'room', value}), /player/);\r\n            const playerRest = filteredRest(gameState.player, /inventory/);\r\n            return {\r\n                player: {\r\n                    inventory: action.itmAction.doesRemove ? gameState.player.inventory.filter(item => item.key !== action.item.key) : gameState.player.inventory,\r\n                    ...playerRest\r\n                },\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        default: throw new Error(`Must include a valid action.type in action ${JSON.stringify(action)}`);\r\n    }\r\n}\r\n\r\nconst GameStateProvider = (props) => {\r\n    const [gameState, dispatchGameState] = useReducer(gameStateReducer, initGameState);\r\n    const value = useMemo(() => [gameState, dispatchGameState], [gameState])\r\n    return <GameStateContext.Provider value={value} {...props}/>;\r\n}\r\n\r\nexport default GameStateProvider;\r\nexport { useGameState };","import React from 'react';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst PrintBtn = () => {\r\n    const [, dispatchGameState] = useGameState();\r\n    const printGameState = () => dispatchGameState({\r\n        ctx: 'printBtn',\r\n        type: 'printGameState'\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={printGameState}>Print GameState</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrintBtn;","const beastDictionary = {\r\n  'Cave Spider': {\r\n    baseTitle: 'Cave Spider',\r\n    scarcity: '1d4-1', //each time a room is generated, an amount of this beast is rolled for; higher rolls indicate higher frequency etc.\r\n    healthDie: '1d3+1',\r\n    armorDie: 0,\r\n    savingThrowDie: '1d6',\r\n    strength: '1d4',\r\n    elementalScarcity: '2d6',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/2/28/Araneus_diadematus_%28Spider_underside%29.jpg',\r\n    dyingMessage: 'You squish the spider. Then wish you hadn\\'t.'\r\n  },\r\n  'Cave Rat': {\r\n    baseTitle: 'Cave Rat',\r\n    scarcity: '1d4-2',\r\n    healthDie: '1d2+1',\r\n    armorDie: 0,\r\n    savingThrowDie: 0,\r\n    strength: 2,\r\n    elementalScarcity: '3d6',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/1/1d/Albino_Rat.jpg',\r\n    dyingMessage: 'You squish the rat. Then wish you hadn\\'t.'\r\n  },\r\n  'Un Beast': {\r\n    baseTitle: 'Un Beast',\r\n    scarcity: '1d4-2',\r\n    healthDie: '2d6+5',\r\n    armorDie: 5,\r\n    savingThrowDie: 0,\r\n    strength: 5,\r\n    elementalScarcity: '1d4',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/1/1d/Albino_Rat.jpg',\r\n    dyingMessage: 'You unmake the unbeast. Hm.'\r\n  }\r\n}\r\n\r\nexport default beastDictionary;","const elements = {\r\n  fire: {\r\n    scarcity: 0.8,\r\n    healthMod: 1\r\n  },\r\n  water: {\r\n    scarcity: 0.8,\r\n    healthMod: 1\r\n  },\r\n  nether: {\r\n    scarcity: 0.2,\r\n    healthMod: 5\r\n  }\r\n}\r\n\r\nexport default elements;","import rollDie from './rollDie';\r\nimport beastDictionary from '../dictionaries/beastDictionary';\r\nimport elements from '../initModels/elements';\r\n\r\nconst getKey = () => Math.random() * 100;\r\n\r\nconst generateNewBeast = (allowedBeasts = ['spider'], locationLvl = 1) => {\r\n  const floorDCChecks = { //roll DC checks based on Location lvl; think \"roll on table 'y' for 'x' LocationLvl\"\r\n    elements: rollDie('2d4+4')\r\n  };\r\n  const lvlMod = locationLvl - 1; //only allow beasts to mod at >= lvl2\r\n\r\n  const beastBaseTitle = allowedBeasts[Math.floor(Math.random() * allowedBeasts.length)];\r\n  const beastRef = beastDictionary[beastBaseTitle];\r\n  const key = getKey();\r\n  const hp = rollDie(beastRef.healthDie) + lvlMod;\r\n  const maxHp = hp;\r\n  const elem = rollDie(beastRef.elementalScarcity) + lvlMod > floorDCChecks.elements ? elements[Math.floor(Math.random() * elements.length)] : null;\r\n\r\n  const generatedParams = {\r\n    hp,\r\n    maxHp,\r\n    key,\r\n    elem\r\n  }\r\n  \r\n  return Object.assign({}, beastRef, generatedParams);\r\n}\r\n\r\nexport default generateNewBeast;","import React, { Fragment, useState } from 'react';\r\nimport generateNewBeast from '../../../../helpers/utilityLambdas/generateNewBeast';\r\nimport beastDictionary from '../../../../helpers/dictionaries/beastDictionary';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\nimport './Beasterator.css';\r\n\r\nconst Beasterator = () => {\r\n  const [, dispatchGameState] = useGameState();\r\n  const [beast, setBeast] = useState(null);\r\n  const [selectedBeastList, setBeastList] = useState([]);\r\n  const ctx = 'console';\r\n\r\n  const getNewBeast = () => generateNewBeast(selectedBeastList.length > 0 ? selectedBeastList : Object.keys(beastDictionary))\r\n\r\n  const handleClickNewBeast = () => {\r\n    const newBeast = getNewBeast();\r\n    dispatchGameState({\r\n      ctx,\r\n      type: 'addLog',\r\n      value: `Generated a new ${newBeast.baseTitle}`\r\n    });\r\n    setBeast(newBeast);\r\n  }\r\n\r\n  const handleToggleCheckbox = (b) => {\r\n    const concat = selectedBeastList.indexOf(b) === -1;\r\n    const updatedList = concat ? selectedBeastList.concat(b) : selectedBeastList.filter(s => s !== b);\r\n    setBeastList(updatedList);\r\n  }\r\n\r\n  const handlePushBeast = () => {\r\n    const newBeast = beast ? beast : getNewBeast();\r\n    dispatchGameState({\r\n      ctx,\r\n      type: 'pushBeastToRoom',\r\n      beast: newBeast,\r\n      roomIndex: 0\r\n    });\r\n    setBeast(null);\r\n  }\r\n\r\n  const beastCheckboxes = Object.keys(beastDictionary).map(b => (\r\n    <Fragment key={b}>\r\n      <label>{b}</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        value={selectedBeastList.indexOf() > -1}\r\n        onClick={() => handleToggleCheckbox(b)}\r\n      />\r\n    </Fragment>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"beasterator\">\r\n      <div className=\"console-component-title\">\r\n        <h3>Beasterator</h3>\r\n      </div>\r\n      <div className=\"beasterator-controls\">\r\n        {beastCheckboxes}\r\n      </div>\r\n      <div className=\"btn\">\r\n        <button onClick={handleClickNewBeast}>Generate new beast</button>\r\n        <button onClick={handlePushBeast}>Generate + push to Room</button>\r\n      </div>\r\n      <div className=\"beast-container\">\r\n        {beast &&\r\n          <>\r\n            <button onClick={() => handlePushBeast(beast)}>Push to Room</button>\r\n          </>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Beasterator;","import React, { useState } from 'react';\r\nimport rollDie from '../../../../helpers/utilityLambdas/rollDie';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst standardDice = [\r\n  4,\r\n  6,\r\n  8,\r\n  10,\r\n  12,\r\n  16,\r\n  20\r\n];\r\n\r\nconst Roller = () => {\r\n  const [, dispatchGameState] = useGameState();\r\n  const [dieAmt, setDieAmt] = useState(1);\r\n  const [die, setDie] = useState('d4');\r\n  const [mod, setMod] = useState(0);\r\n  const [rollVal, setRollVal] = useState(0);\r\n\r\n  const handleModifierOnChange = ({target}) => setMod(target.value);\r\n\r\n  const handleDieNumberOnChange = ({target}) => setDieAmt(target.value);\r\n\r\n  const handleDieSelect = (d) => setDie(d);\r\n\r\n  const handleRoll = () => {\r\n    const rollResult = rollDie(rollString);\r\n    dispatchGameState({\r\n      ctx: 'console',\r\n      type: 'addLog',\r\n      value: `Rolling ${rollString}... Result: ${rollResult}`\r\n    });\r\n    setRollVal(rollResult);\r\n  }\r\n\r\n  const diceBtns = standardDice.map(d => {\r\n    const btnDie = `d${d}`;\r\n    return (\r\n      <button\r\n        key={d}\r\n        onClick={() => handleDieSelect(btnDie)}\r\n        className={`btn${btnDie === die ? ' active' : ''}`}\r\n      >\r\n        {btnDie}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  const rollString = `${dieAmt}${die}${mod > 0 ? `+${mod}` : ''}`;\r\n\r\n  return (\r\n    <div className=\"roller\">\r\n      <div className=\"console-component-title\">\r\n        <h3>Roller</h3>\r\n      </div>\r\n      <div className=\"button-die-number\">\r\n        <input onChange={handleDieNumberOnChange} value={dieAmt}/>\r\n      </div>\r\n      <div className=\"button-group-dice\">\r\n        {diceBtns}\r\n      </div>\r\n      <div className=\"modifiers\">\r\n        Set modifier\r\n        <input type=\"number\" onChange={handleModifierOnChange} value={mod}/>\r\n      </div>\r\n      <button onClick={handleRoll} msg={`[Roller]: Rolled ${rollString}`}>Roll die</button>\r\n      {rollVal && (\r\n        <div className=\"roll-value\">\r\n          Rolling {rollString}... {rollVal}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Roller;","import React from 'react';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst Locationator = () => {\r\n    const [gameState, dispatchGameState] = useGameState();\r\n\r\n    const ctx = 'locationator';\r\n\r\n    const handleClearRoom = () => {\r\n        dispatchGameState({\r\n            ctx,\r\n            type: 'clearRoom'\r\n        });\r\n    }\r\n\r\n    const handleClearBattle = () => {\r\n        dispatchGameState({\r\n            ctx,\r\n            type: 'clearBattle'\r\n        });\r\n    }\r\n\r\n    const {location} = gameState;\r\n    const {nearbyBeasts} = location;\r\n    return (\r\n        <div className=\"locationator\">\r\n            {nearbyBeasts.length > 0 && (\r\n                <button onClick={handleClearRoom}>\r\n                    Clear Room\r\n                </button>\r\n            )}\r\n            {nearbyBeasts.filter(b => b.isInBattle).length > 0 && (\r\n                <button onClick={handleClearBattle}>\r\n                    Clear Battle\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Locationator;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport PrintBtn from './PrintBtn';\r\nimport Beasterator from './Beasterator'\r\nimport Roller from './Roller';\r\nimport Locationator from './Locationator';\r\nimport './Console.css';\r\n\r\nconst Console = () => {\r\n    const [gameState] = useGameState();\r\n    \r\n    const isActive = gameState.focusMode === 'console';\r\n    return (\r\n        <div className={`console${isActive ? ' active' : ''}`}>\r\n            <PrintBtn/>\r\n            <Beasterator/>\r\n            <Roller/>\r\n            <Locationator/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Console;","import React from 'react';\r\nimport avatar from '../../../media/img/rl_avatar.svg';\r\nimport './PlayerAvatar.css';\r\n\r\nconst PlayerAvatar = () => {\r\n    return (\r\n        <div className=\"player-display-avatar\">\r\n            <img src={avatar} alt=\"player avatar\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerAvatar;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './PlayerStats.css';\r\n\r\nconst PlayerStats = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const playerStats = gameState.player.vitalStats;\r\n    return (\r\n        <div className=\"player-display-stats\">\r\n            <div className=\"player-display-inner\">\r\n                {Object.keys(playerStats).map(s => <div key={s}>{s}: {playerStats[s]}</div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerStats;","import React from 'react';\r\nimport PlayerAvatar from '../../atoms/PlayerAvatar';\r\nimport PlayerStats from '../../molecules/PlayerStats';\r\nimport './PlayerDisplay.css';\r\n\r\nconst PlayerDisplay = () => {\r\n    return (\r\n        <div className=\"player-display\">\r\n            <PlayerAvatar/>\r\n            <PlayerStats/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerDisplay;","import React from 'react';\r\n\r\nconst LogBody = ({messages}) => {\r\n    return (\r\n        <div className=\"log-body-inner-container\">\r\n            {messages.map((m, i) => (\r\n                <div key={m.value.concat(i)}>\r\n                    <span>{m.value}</span>\r\n                </div>\r\n            ))\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogBody;","import React from 'react'\r\n\r\nconst LogScrollBtns = ({messagesLength, activeViewIndex, handleAdjustViewIndex}) => {\r\n    return (\r\n        <div className=\"log-body-view-index-btns\">\r\n            <div className=\"view-index-btns-container\">\r\n                <button className={`view-index-btn${(messagesLength === 0 || activeViewIndex === messagesLength - 1) ? ' disabled' : ''}`} onClick={() => handleAdjustViewIndex(1)}>↑</button>\r\n                <button className={`view-index-btn${activeViewIndex === 0 ? ' disabled' : ''}`} onClick={() => handleAdjustViewIndex(-1)}>↓</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogScrollBtns;","import React from 'react';\r\n\r\nconst LogFilterBtns = ({ctxFocus, displayTypes, handleFilterClick}) => {\r\n    const filterButtons = displayTypes.map(t => (\r\n        <button className={`filter-btn${ctxFocus === t ? ' active' : ''}`} key={t} onClick={() => handleFilterClick(t)}>\r\n            <span>{t}</span>\r\n        </button>\r\n    ));\r\n    return (\r\n        <div className=\"log-filter-btns\">\r\n            {filterButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogFilterBtns;","import React, { useState, useMemo } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport LogBody from '../../molecules/LogBody';\r\nimport LogScrollBtns from '../../molecules/LogScrollBtns';\r\nimport LogFilterBtns from '../../molecules/LogFilterBtns';\r\nimport './Log.css';\r\n\r\nconst Log = () => {\r\n    const [gameState] = useGameState();\r\n    const [ctxFocus, setCtxFocus] = useState('general');\r\n    const [activeViewIndex, setActiveViewIndex] = useState(0);\r\n    \r\n    const displayTypes = useMemo(() => {\r\n        return gameState.log.messages\r\n            .map(({ctx}) => ctx)\r\n            .reduce((acc, curr) => {\r\n                if (acc.indexOf(curr) > -1) return acc;\r\n                else return acc.concat(',').concat(curr);\r\n            })\r\n            .split(',');\r\n        }, [gameState.log.messages]);\r\n\r\n    const handleFilterClick = (t) => {\r\n        setActiveViewIndex(0);\r\n        setCtxFocus(t);\r\n    }\r\n\r\n    const messages = gameState.log.messages;\r\n    const filteredMessages = ctxFocus === 'general' ? messages : messages.filter(({ctx}) => ctx === ctxFocus);\r\n    const VIEW_LIMIT = 11; //arbitrary - draw by element.getClientBoundingRect()\r\n\r\n    const adjustViewIndex = (amt) => {\r\n        if (activeViewIndex + amt < 0 || activeViewIndex + amt > filteredMessages.length - 1) return;\r\n        setActiveViewIndex(amt ? activeViewIndex + amt : 0);\r\n    }\r\n    \r\n    const endIndex = filteredMessages.length - activeViewIndex;\r\n    const begIndex = endIndex >= VIEW_LIMIT ? endIndex - VIEW_LIMIT : 0;\r\n    const logMessages = filteredMessages.slice(begIndex, endIndex);\r\n        \r\n    return (\r\n        <div className=\"log\">\r\n            <div className=\"log-body\">\r\n                <LogBody\r\n                    messages={logMessages}\r\n                />\r\n                <LogScrollBtns\r\n                    messagesLength={filteredMessages.length}\r\n                    handleAdjustViewIndex={adjustViewIndex}\r\n                />\r\n            </div>\r\n            <LogFilterBtns\r\n                ctxFocus={ctxFocus}\r\n                handleFilterClick={handleFilterClick}\r\n                displayTypes={displayTypes}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Log;","import React from 'react';\r\nimport PlayerDisplay from '..//PlayerDisplay';\r\nimport Log from '../Log';\r\nimport './HUD.css';\r\n\r\nconst HUD = () => {\r\n    return (\r\n        <div className=\"heads-up-display\">\r\n            <PlayerDisplay/>\r\n            <Log/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HUD;","const canDrop = {\r\n    type: 'drop',\r\n    doesRemove: true\r\n};\r\n\r\nconst canThrow = {\r\n    type: 'throw',\r\n    doesRemove: true\r\n};\r\n\r\nconst itemDictionary = {\r\n    weapon: {\r\n        allowedActions: [\r\n            {\r\n                type: 'attack',\r\n                doesRemove: false\r\n            },\r\n            {...canThrow},\r\n            {...canDrop}\r\n        ]\r\n    },\r\n    potion: {\r\n        allowedActions: [\r\n            {\r\n                type: 'quaff',\r\n                doesRemove: true\r\n            },\r\n            {...canDrop}\r\n        ]\r\n    }\r\n};\r\n\r\nexport default itemDictionary;","import React, { useState } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport itemDictionary from '../../../helpers/dictionaries/itemDictionary';\r\nimport './InventoryControls.css';\r\n\r\nconst InventoryControls = () => {\r\n    const [gameState, dispatchGameState] = useGameState();\r\n    const [focusItem, setFocusItem] = useState();\r\n\r\n    const handleUseItem = (itmAction) => dispatchGameState({\r\n        ctx: 'inventory',\r\n        type: 'applyAction',\r\n        item: focusItem,\r\n        itmAction\r\n    });\r\n\r\n    const inventory = gameState.player.inventory.map((item, i) => (\r\n        <div key={item.baseTitle.concat(i)} className=\"inventory-item\" onClick={() => setFocusItem(item)}>\r\n            {item.baseTitle}\r\n        </div>\r\n    ));\r\n    const isInIventory = focusItem && focusItem.hasOwnProperty('key') && gameState.player.inventory.filter(item => item.key === focusItem.key).length > 0;\r\n    \r\n    return (\r\n        <div className=\"inventory-controls\">\r\n            {inventory}\r\n            {isInIventory && (\r\n                <div className=\"focus-item-container\">\r\n                    <h5>Use {focusItem.baseTitle}</h5>\r\n                    <div className=\"focus-item-action-list\">\r\n                        {itemDictionary[focusItem.type].allowedActions.map(a => (\r\n                            <button key={a.type} onClick={() => handleUseItem(a)}>{a.type}</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InventoryControls;","import React from 'react'\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport InventoryControls from '../../molecules/InventoryControls';\r\nimport './ControlsPanel.css';\r\n\r\nconst ControlsPanel = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    return (\r\n        <div className={`controls-panel${gameState.focusMode === 'inventory' ? ' active': ''}`}>\r\n            {gameState.focusMode === 'inventory' && <InventoryControls/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlsPanel;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './ActionHUD.css';\r\n\r\nconst ActionHUD = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const roomStats = gameState.location.nearbyBeasts.length;\r\n    const roomHUD = gameState.log.messages.filter(m => m.ctx === 'roomHUD');\r\n    const roomHUDTip = roomHUD ? roomHUD[roomHUD.length - 1] : null;\r\n    return (\r\n        <div className=\"action-heads-up-display\">\r\n            <div>Beasts in room: {roomStats}</div>\r\n            <div>{roomHUDTip && roomHUDTip.value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActionHUD;","import React from 'react';\r\n\r\nconst PlayerCell = ({gridAreaStyle}) => <div className={`player`} style={gridAreaStyle}></div>;\r\n\r\nexport default PlayerCell;","import React from 'react';\r\nimport PlayerCell from '../../atoms/PlayerCell';\r\n\r\nconst PlayerGrid = ({gridStyle, playerCoords}) => {\r\n    const gridAreaStyle = {\r\n        gridColumn: `${playerCoords.x} / ${playerCoords.x + 1}`,\r\n        gridRow: `${playerCoords.y} / ${playerCoords.y + 1}`                \r\n    };\r\n    \r\n    return (\r\n        <div className=\"room-grid player-grid\" style={gridStyle}>\r\n            <PlayerCell playerCoords={playerCoords} gridAreaStyle={gridAreaStyle}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerGrid;","import React from 'react';\r\nimport './BeastHealthBar.css';\r\n\r\nconst BeastHealthBar = ({currHealth, maxHealth}) => {\r\n  const width = `${currHealth / maxHealth * 100}%`;\r\n  const barStyle = {\r\n    width\r\n  };\r\n  return (\r\n    <div className=\"health-bar\">\r\n      <span style={barStyle}></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BeastHealthBar;","import React from 'react';\r\nimport BeastHealthBar from '../BeastHealthBar';\r\n\r\nconst BeastCell = ({beast, gridAreaStyle, onClick}) => {\r\n    return (\r\n        <div onClick={onClick} className={`beast ${beast.baseTitle.replace(/\\s/g, '-').toLowerCase()}${beast.isTargeted ? ' is-targeted' : ''}`} style={gridAreaStyle}>\r\n            <BeastHealthBar currHealth={beast.hp} maxHealth={beast.maxHp}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BeastCell;","import React from 'react';\r\nimport BeastCell from '../../molecules/BeastCell';\r\nimport './ActorGrid.css';\r\n\r\nconst ActorGrid = ({gridStyle, nearbyBeasts, onClick}) => {\r\n    return (\r\n        <div className=\"room-grid actor-grid\" style={gridStyle}>\r\n            {nearbyBeasts.length > 0 && (\r\n                nearbyBeasts.map(beast => {\r\n                    const beastGridAreaStyle = {\r\n                        gridColumn: `${beast.coords.x} / ${beast.coords.x + 1}`,\r\n                        gridRow: `${beast.coords.y} / ${beast.coords.y + 1}`                \r\n                    };\r\n                    const dispatchParams = {\r\n                        ctx: 'BeastCell',\r\n                        type: 'handleTargetBeast',\r\n                        beast\r\n                    };\r\n                    \r\n                    return (\r\n                        <BeastCell\r\n                            key={''.concat(beast.coords.x).concat(beast.coords.y)}\r\n                            onClick={() => onClick(dispatchParams)}\r\n                            beast={beast}\r\n                            gridAreaStyle={beastGridAreaStyle}\r\n                        />\r\n                    );\r\n                })\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActorGrid;","import React from 'react';\r\n\r\nconst Cell = ({tileType, onClick}) => {\r\n    return (\r\n        <div className={`map-tile ${tileType}`} onClick={onClick}>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cell;","import React, { useMemo } from 'react';\r\nimport Cell from '../../atoms/Cell';\r\n\r\nconst TileGrid = ({tiles, gridStyle, handleClickTile}) => {\r\n    const roomCoords = useMemo(() => {\r\n        const onClickTile = (index) => handleClickTile({\r\n            ctx: 'cell',\r\n            type: 'handleClickTile',\r\n            index\r\n        });\r\n\r\n        return tiles.map(({tileType}, i) => {\r\n            return (\r\n                <Cell\r\n                    key={i}\r\n                    tileType={tileType}\r\n                    onClick={() => onClickTile(i)}\r\n                />\r\n            );\r\n        });\r\n    }, [\r\n        tiles,\r\n        handleClickTile\r\n    ]);\r\n\r\n    return (\r\n        <div className=\"room-grid tile-grid\" style={gridStyle}>\r\n            {roomCoords}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TileGrid;","import React, { useEffect } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport PlayerGrid from '../../molecules/PlayerGrid';\r\nimport ActorGrid from '../../molecules/ActorGrid';\r\nimport TileGrid from '../../molecules/TileGrid';\r\nimport './Room.css';\r\n\r\nconst gridUnit = '1em';\r\n\r\nconst Room = ({roomIndex}) => {\r\n    const [gameState, dispatchGameState] = useGameState();\r\n\r\n    const ctx = 'Room';\r\n\r\n    useEffect(() => {\r\n        const handleToggleConsole = () => dispatchGameState({\r\n            ctx,\r\n            type: 'toggleConsole'\r\n        });\r\n        const handleToggleInventory = (forceClose) => dispatchGameState({\r\n            ctx,\r\n            type: forceClose ? 'handleClosePanel' : 'handleToggleInventory'\r\n        });\r\n        const handleArrowPress = (kCode) => {\r\n            const dirFromCode = () => {\r\n                switch (kCode) {\r\n                    case 37: return 'left';\r\n                    case 38: return 'up';\r\n                    case 39: return 'right';\r\n                    case 40: return 'down';\r\n                    default: {\r\n                        throw new Error(`Invalid keyCode supplied ${JSON.stringify(kCode)}`);\r\n                    }\r\n                }\r\n            };\r\n            dispatchGameState({\r\n                ctx,\r\n                type: 'handleMoveActor',\r\n                dir: dirFromCode()\r\n            });\r\n        };\r\n\r\n        const arrowHandlerKeyCodes = [\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        ];\r\n    \r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.isComposing || e.keyCode === 229) return;\r\n            if (arrowHandlerKeyCodes.indexOf(e.keyCode) > -1) handleArrowPress(e.keyCode);\r\n            if (e.keyCode === 73) handleToggleInventory();\r\n            if (e.keyCode === 27) handleToggleInventory(true);\r\n            if (e.keyCode === 67) handleToggleConsole();\r\n        });\r\n    }, [dispatchGameState]);\r\n\r\n    const room = gameState.location.rooms[roomIndex];\r\n    const dimensionality = room.dimensionality;\r\n    const tiles = room.tiles;\r\n    const gridStyle = {\r\n        gridTemplateColumns: `repeat(${dimensionality}, ${gridUnit})`,\r\n        gridTemplateRows: `repeat(${dimensionality}, ${gridUnit})`\r\n    };\r\n    const playerCoords = gameState.player.roomCoords;\r\n    const nearbyBeasts = gameState.location.nearbyBeasts;\r\n    const handleTargetBeast = dispatchGameState;\r\n    \r\n    return (\r\n        <div className=\"room\">\r\n            <PlayerGrid\r\n                gridStyle={gridStyle}\r\n                playerCoords={playerCoords}\r\n            />\r\n            <ActorGrid\r\n                gridStyle={gridStyle}\r\n                nearbyBeasts={nearbyBeasts}\r\n                onClick={handleTargetBeast}\r\n            />\r\n            <TileGrid\r\n                gridStyle={gridStyle}\r\n                tiles={tiles}\r\n                roomIndex={roomIndex}\r\n                handleClickTile={dispatchGameState}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Room;","import React from 'react';\r\nimport Room from '../Room';\r\nimport './ActionDisplay.css';\r\n\r\nconst ActionDisplay = () => {\r\n    const roomIndex = 0;\r\n    return (\r\n        <div className=\"action-display\">\r\n            <Room roomIndex={roomIndex}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActionDisplay;","import React from 'react';\r\nimport ActionHUD from '../ActionHUD';\r\nimport ActionDisplay from '../ActionDisplay';\r\nimport './GameDisplay.css';\r\n\r\nconst GameDisplay = () => {\r\n    return (\r\n        <div className=\"game-display\">\r\n            <ActionDisplay/>\r\n            <ActionHUD/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameDisplay;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './TargetHUD.css';\r\n\r\nconst beastTargetParams = /(baseTitle|scarcity|strength|hp|maxHp|elem|coords)/;\r\n\r\nconst TargetHUD = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const targetedObject = gameState.location.nearbyBeasts.filter(b => b.isTargeted)[0];\r\n    return (\r\n        <div className=\"target-heads-up-display\">\r\n            {targetedObject && (\r\n                <div className=\"target-heads-up-display-inner-container\">\r\n                    {Object.keys(targetedObject).filter(k => beastTargetParams.test(k)).map(k => <div key={k}><b>{k}:</b> {JSON.stringify(targetedObject[k])}</div>)}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TargetHUD;","import React from 'react';\r\nimport TargetHUD from '../TargetHUD';\r\nimport './InfoPanel.css';\r\n\r\nconst CommandInfoPanel = () => {\r\n    return (\r\n        <div className=\"command-instruction-panel\">\r\n            <div>\r\n                c: toggle console\r\n            </div>\r\n            <div>\r\n                i: inventory\r\n            </div>\r\n            <div>\r\n                arrow keys: navigate\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst InfoPanel = () => {\r\n    return (\r\n        <div className=\"info-panel\">\r\n            <div className=\"info-panel-inner\">\r\n                <CommandInfoPanel/>\r\n                <TargetHUD/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoPanel;","import React from 'react';\r\nimport GameStateProvider from '../../../helpers/reducers/gameStateReducer';\r\nimport Console from '../Console';\r\nimport HUD from '../HUD';\r\nimport ControlsPanel from '../ControlsPanel';\r\nimport GameDisplay from '../GameDisplay';\r\nimport InfoPanel from '../InfoPanel';\r\nimport './Game.css';\r\n\r\nconst Game = () => {\r\n    return (\r\n        <GameStateProvider>\r\n            <Console/>\r\n            <div className=\"game\">\r\n                <HUD/>\r\n                <ControlsPanel/>\r\n                <GameDisplay/>\r\n                <InfoPanel/>\r\n            </div>\r\n        </GameStateProvider>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './components/containers/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}