{"version":3,"sources":["media/img/rl_avatar.svg","helpers/utilityLambdas/generateMap.js","helpers/initModels/initGameState.js","helpers/initModels/initPlayerStats.js","helpers/utilityLambdas/toCoords.js","helpers/utilityLambdas/rollDie.js","helpers/reducers/gameStateReducer.js","components/containers/Console/PrintBtn/index.js","helpers/dictionaries/beastDictionary.js","helpers/initModels/elements.js","helpers/utilityLambdas/generateNewBeast.js","components/containers/Console/Beasterator/index.js","components/containers/Console/Roller/index.js","components/containers/Console/Locationator/index.js","components/containers/Console/index.js","components/atoms/PlayerAvatar/index.js","components/molecules/PlayerStats/index.js","components/containers/PlayerDisplay/index.js","components/molecules/LogBody/index.js","components/molecules/LogScrollBtns/index.js","components/molecules/LogFilterBtns/index.js","components/containers/Log/index.js","components/containers/HUD/index.js","helpers/dictionaries/itemDictionary.js","components/molecules/InventoryControls/index.js","components/containers/ControlsPanel/index.js","components/containers/TargetHUD/index.js","components/containers/ActionHUD/index.js","components/atoms/PlayerCell/index.js","components/molecules/PlayerGrid/index.js","components/molecules/BeastHealthBar/index.js","components/molecules/BeastCell/index.js","components/molecules/ActorGrid/index.js","components/atoms/Cell/index.js","components/molecules/TileGrid/index.js","components/containers/Room/index.js","components/containers/ActionDisplay/index.js","components/containers/MapDisplay/index.js","components/containers/GameDisplay/index.js","components/containers/InfoPanel/index.js","components/containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAP_CONSTANTS","generateRoom","coords","roomIndex","tunnelFromDir","y","x","delta","dimensionality","Math","floor","random","tunnelDirections","filter","dir","indices","top","left","right","indexOf","bottom","portalIndices","Object","fromEntries","keys","k","map","tiles","Array","from","length","_","i","edge","isEdge","isPortal","tileType","toRoomIndex","id","type","initGameState","turn","player","roomCoords","inventory","baseTitle","isEquipped","damage","key","proximity","equippedBy","range","rangeMod","description","baseStats","strength","agility","constitution","perception","wisdom","intelligence","savingThrow","vitalStats","hp","sp","xp","corruption","statMod","mod","log","messages","ctx","value","location","level","rooms","generateRooms","room","nextCoords","concat","r","undefined","generateMap","nearbyBeasts","toIndex","toCoords","index","rollDie","die","hazMod","n","Number","split","d","reducedVal","ceil","reduce","acc","curr","GameStateContext","createContext","useGameState","useContext","Error","gameStateReducer","gameState","action","filteredRest","obj","filterKey","test","gameRestFromLocation","addLog","msgs","isArray","forEach","msg","JSON","stringify","gameRest","logRest","formattedMsgs","console","locationRest","beast","loc","openTiles","tile","t","updatedBeast","assign","b","isTargeted","targetState","targetBeast","handleTargetBeast","dX","dY","tileIndex","targetTile","fromEdge","toEdge","targetTileIndex","playerRest","handleMoveRooms","nearbyBeastsCoords","beastTarget","weapon","item","amtFromAttack","dyingMessage","targetActor","rollMsg","vitalStatsRest","amt","focusMode","itmAction","target","verb","doesRemove","GameStateProvider","props","useReducer","dispatchGameState","useMemo","Provider","PrintBtn","onClick","beastDictionary","scarcity","healthDie","armorDie","savingThrowDie","elementalScarcity","imgSrc","elements","fire","healthMod","water","nether","getKey","generateNewBeast","allowedBeasts","locationLvl","floorDCChecks","lvlMod","beastBaseTitle","beastRef","maxHp","elem","generatedParams","Beasterator","useState","setBeast","selectedBeastList","setBeastList","getNewBeast","handlePushBeast","newBeast","beastCheckboxes","updatedList","s","handleToggleCheckbox","className","standardDice","Roller","dieAmt","setDieAmt","setDie","setMod","rollVal","setRollVal","diceBtns","btnDie","handleDieSelect","rollString","onChange","rollResult","Locationator","isInBattle","Console","isActive","PlayerAvatar","src","avatar","alt","PlayerStats","playerStats","PlayerDisplay","LogBody","m","LogScrollBtns","messagesLength","activeViewIndex","handleAdjustViewIndex","LogFilterBtns","ctxFocus","displayTypes","handleFilterClick","filterButtons","Log","setCtxFocus","setActiveViewIndex","filteredMessages","endIndex","begIndex","logMessages","slice","style","padding","HUD","canDrop","itemDictionary","allowedActions","potion","InventoryControls","focusItem","setFocusItem","isInIventory","hasOwnProperty","a","ControlsPanel","beastTargetParams","TargetHUD","targetedObject","ActionHUD","roomStats","roomHUD","roomHUDTip","PlayerCell","gridAreaStyle","PlayerGrid","gridStyle","playerCoords","gridColumn","gridRow","BeastHealthBar","currHealth","maxHealth","barStyle","width","BeastCell","replace","toLowerCase","ActorGrid","beastGridAreaStyle","dispatchParams","Cell","TileGrid","handleClickTile","Room","useEffect","handleToggleInventory","forceClose","arrowHandlerKeyCodes","window","addEventListener","e","kCode","isComposing","keyCode","dirFromCode","gridTemplateColumns","gridTemplateRows","display","roomStyle","height","ActionDisplay","MapDisplay","mapCells","isPlayerInRoom","backgroundColor","GameDisplay","CommandInfoPanel","InfoPanel","Game","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be8119fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rl_avatar.a75d3f2a.svg\";","const MAP_CONSTANTS = {\r\n    MAP_DIMENSIONALITY: 80,\r\n    ROOM_DIMENSIONALITY_MIN: 7,\r\n    ROOM_DIMENSIONALITY_MAX: 25\r\n};\r\n\r\nconst generateRoom = (coords, roomIndex, tunnelFromDir) => {\r\n    //console.log('tunnelFromDir', tunnelFromDir);\r\n    const getAvailWidth = () => MAP_CONSTANTS.MAP_DIMENSIONALITY - coords.x;\r\n    const getAvailHeight = () => MAP_CONSTANTS.MAP_DIMENSIONALITY - coords.y;\r\n    //console.log('getAvailWidth', getAvailWidth(), 'getAvailHeight', getAvailHeight())\r\n    if (getAvailHeight() < MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN || getAvailWidth() < MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN) return null;\r\n    \r\n    const id = 0; //increment\r\n    const type = 'none'; //develop - could be patterns of room tiles/different room building algorithm (none|swarm|pit|maze|shrine|...)\r\n    const upperBound = MAP_CONSTANTS.ROOM_DIMENSIONALITY_MAX + 1;\r\n    const delta = upperBound - MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN;\r\n    const dimensionality = Math.floor(Math.random() * delta) + MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN;\r\n    const isEdge = (i) => {\r\n        if (i <= dimensionality) return 'top';\r\n        else if (i % dimensionality === 0) return 'left';\r\n        else if(i % dimensionality === (dimensionality - 1)) return 'right';\r\n        else if (i >= (dimensionality ** 2) - dimensionality) return 'bottom';\r\n        else return false;\r\n    }\r\n\r\n    const tunnelDirections = [\r\n        //getAvailHeight() >= MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN ?\r\n            'down'\r\n            //: getAvailWidth() >= MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN ?\r\n                //'right' : null\r\n    ].filter(dir => dir !== null);\r\n\r\n    //extend - depend on rules for portals (i.e. amt per wall and direction)\r\n    const topPortalIndex = tunnelFromDir === 'down' ? Math.floor(Math.random() * (dimensionality - 4)) + 1 : null;\r\n    const leftPortalIndex = tunnelFromDir === 'right' ? dimensionality * Math.floor(Math.random() * (dimensionality - 4) + 2) : null;\r\n    const rightPortalIndex = tunnelDirections.indexOf('right') > - 1 ? (dimensionality * Math.floor(Math.random() * (dimensionality - 4) + 2)) - 1 : null;\r\n    const bottomPortalIndex = tunnelDirections.indexOf('down') > - 1 ? (dimensionality ** 2) - Math.floor(Math.random() * dimensionality) : null;\r\n    /*\r\n    extend:\r\n    portalIndex = {\r\n        index: ${indexInList},\r\n        toRoomIndex: ${roomIndexPointer}\r\n    }\r\n    */\r\n    const indices = {\r\n        top: topPortalIndex,\r\n        left: leftPortalIndex,\r\n        right: rightPortalIndex,\r\n        bottom: bottomPortalIndex\r\n    };\r\n    const portalIndices = Object.fromEntries(Object.keys(indices).filter(k => indices[k] !== null).map(k => [k, indices[k]]));\r\n\r\n    const tiles = Array.from({length: dimensionality ** 2}, (_, i) => { //simple static version - returns array of singletons (AKA room with walls on outside and empty tiles within)\r\n        const edge = isEdge(i);\r\n        const isPortal = portalIndices[edge] === i;\r\n        //console.log(`test ${i}: ${isPortal}; ${edge}`)\r\n        const tileType = isPortal ? 'portal': !edge ? 'none' : 'wall';\r\n        //console.log(`Got tile at index ${i}: isPortal === ${isPortal}; tileType === ${tileType}; edge === ${edge}`);\r\n        if (isPortal) return {\r\n            tileType,\r\n            toRoomIndex: roomIndex + (edge === 'bottom' || edge === 'right' ? 1 : -1) //improve - 'find' target index independent of order in list\r\n        };\r\n        return {\r\n            tileType\r\n        };\r\n    });\r\n\r\n    return {\r\n        id,\r\n        type,\r\n        dimensionality,\r\n        tiles,\r\n        tunnelDirections,\r\n        portalIndices\r\n    };\r\n}\r\n\r\nconst generateMap = () => {\r\n    const initCoords = {\r\n        x: 4,\r\n        y: 4\r\n    };\r\n\r\n    const generateRooms = (coords, roomIndex, tunnelFromDir) => {\r\n        /*\r\n        update:\r\n        - invoke with xCoord only, not yCoord\r\n        - first yCoord is randomly determined\r\n        - determine yCoord within generateRoom() for next room:\r\n        -- Range for yCoord for next room must:\r\n        --- lowerYCoord = [(previousRoomUpperYCoord === 0 ? 0 : ) - (previousRoomUpperYCoord - 2)] //allow space for a portal tile + wall tile\r\n        --- upperYCoord = [(previousRoomUpperYCoord > 0 ? lowerYCoord + MAP_CONSTANTS.ROOM_DIMENSIONALITY_MIN, ]\r\n        */\r\n        const room = generateRoom(coords, roomIndex, tunnelFromDir);\r\n        if (!room) return;\r\n        else {\r\n            const dir = room.tunnelDirections[Math.floor(Math.random() * room.tunnelDirections.length)]; //improve\r\n            //if (!dir || room.tunnelDirections.length === 0) throw new Error(`dir and room.tunnelDirections must have valid values: ${JSON.stringify(dir)} ${JSON.stringify(room.tunnelDirections)}`);\r\n            const nextCoords = {\r\n                x: dir === 'right' ? coords.x + room.dimensionality : coords.x,\r\n                y: dir === 'down' ? coords.y + room.dimensionality : coords.y\r\n            };\r\n            //console.log(`Going ${dir} at ${JSON.stringify(nextCoords)} for i ${roomIndex}`);\r\n            return [].concat(room).concat(generateRooms(nextCoords, roomIndex + 1, dir)).filter(r => r !== undefined);\r\n        }\r\n    }\r\n\r\n    return generateRooms(initCoords, 0);\r\n}\r\n\r\nexport default generateMap;\r\nexport { generateRoom };","import initPlayerStats from './initPlayerStats';\r\nimport generateMap from '../utilityLambdas/generateMap';\r\n\r\nconst initGameState = {\r\n    turn: 0,\r\n    player: initPlayerStats,\r\n    log: {\r\n        messages: [{\r\n            ctx: 'general',\r\n            value: 'Started game.'\r\n        }]\r\n    },\r\n    location: {\r\n        level: 1,\r\n        rooms: generateMap(),\r\n        nearbyBeasts: [] //beasts placed within available space in room on generation, or on add to nearbyBeasts (AKA beast entering the room)\r\n    }\r\n};\r\n\r\nexport default initGameState;","const samplePlayerStats = {\r\n    roomCoords: {\r\n        x: 1,\r\n        y: 2,\r\n        roomIndex: 0\r\n    },\r\n    inventory: [{\r\n        type: 'weapon',\r\n        baseTitle: 'Spear',\r\n        isEquipped: true,\r\n        damage: '1d4',\r\n        key: 1001, //arbitrary - improve\r\n        proximity: [\r\n            'melee',\r\n            'ranged'\r\n        ],\r\n        equippedBy: 'hand',\r\n        range: '20ft',\r\n        rangeMod: '1d4',\r\n        description: 'Old and scraggly, you picked this up from your dead father\\'s corpse. He didn\\'t seem to mind.'\r\n    },\r\n    {\r\n        type: 'potion',\r\n        key: 1002, //arbitrary - improve\r\n        baseTitle: 'Absolve Corruption I',\r\n        proximity: 'ranged',\r\n        rangeMod: '1d4',\r\n        equippedBy: 'hand',\r\n        description: 'Smells a bit like old cheese mixed with your gym socks.'\r\n    }],\r\n    baseStats: {\r\n        //modify only with atypical events\r\n        strength: 1,\r\n        agility: 1,\r\n        constitution: 1,\r\n        perception: 1,\r\n        wisdom: 1,\r\n        intelligence: 1,\r\n        savingThrow: '1d8'\r\n    },\r\n    vitalStats: {\r\n        //modify with typical events\r\n        hp: 10,\r\n        sp: 0,\r\n        xp: 0\r\n    },\r\n    corruption: [\r\n        {\r\n            type: '',\r\n            description: '',\r\n            statMod: 'perception',\r\n            mod: -1\r\n        }\r\n    ]\r\n};\r\n\r\nexport default samplePlayerStats;","const toCoords = (index, dimensionality) => ({\r\n    x: index % dimensionality,\r\n    y: Math.floor(index / dimensionality)\r\n});\r\n\r\nconst toIndex = (coords, dimensionality) => coords.y * dimensionality + coords.x;\r\n\r\nexport default toCoords;\r\nexport { toIndex };","const rollDie = (die) => {\r\n  //extend to allow multiple dice to be rolled\r\n  if (die === 0) return 0;\r\n  const hazMod = die.indexOf('+') > -1;\r\n  const n = Number(die.split('')[0]);\r\n  const d = Number(hazMod ? die.split('d')[1].split('+')[0] : die.split('d')[1]);\r\n  const mod = hazMod ? Number(die.split('+')[1]) : 0;\r\n  const getRoll = () => Math.ceil(Math.random() * d);\r\n  const reducedVal = Array.from({length: n}, _ => getRoll())\r\n    .reduce((acc, curr) => acc + curr)\r\n    + mod;\r\n  return reducedVal > 0 ? reducedVal : 0;\r\n}\r\n\r\nexport default rollDie;","import React, { createContext, useContext, useReducer, useMemo } from 'react';\r\nimport initGameState from '../initModels/initGameState';\r\nimport toCoords, { toIndex } from '../utilityLambdas/toCoords';\r\nimport rollDie from '../utilityLambdas/rollDie';\r\n\r\nconst GameStateContext = createContext();\r\n\r\nconst useGameState = () => {\r\n    const ctx = useContext(GameStateContext);\r\n    if (!ctx) {\r\n        throw new Error(`must use within a ContextProvider`);\r\n    }\r\n    return ctx;\r\n}\r\n\r\nconst gameStateReducer = (gameState, action) => {\r\n    gameState.turn += 1 ; //find a performant way to do this without mutation\r\n    const filteredRest = (obj, filterKey) => Object.fromEntries(\r\n        Object.keys(obj)\r\n          .filter(key => !filterKey.test(key))\r\n          .map(key => [key, obj[key]])\r\n        );\r\n    \r\n    const gameRestFromLocation = filteredRest(gameState, /location/);\r\n    \r\n    const handleTargetBeast = (beast = action.beast) => {\r\n        //if (!beast) throw new Error(`Must supply valid beast obj in handleTargetBeast`);\r\n        gameState.turn -= 1;\r\n        const targetBeast = beast ? beast : action.targetBeast;\r\n        const locationRest = filteredRest(gameState.location, /(nearbyBeasts|targetState)/);\r\n        const gameRest = filteredRest(addLog({ctx: 'room', value: `Targeting ${targetBeast.baseTitle}.`}), /location/);\r\n        const updatedBeast = Object.assign({}, targetBeast, {isTargeted: true});\r\n        \r\n        return {\r\n            location: {\r\n                targetState: false,\r\n                nearbyBeasts: gameState.location.nearbyBeasts.filter(b => b.key !== targetBeast.key).map(b => Object.assign({}, b, {isTargeted: false})).concat(updatedBeast),\r\n                ...locationRest\r\n            },\r\n            ...gameRest\r\n        }\r\n    }\r\n\r\n    const addLog = (msgs) => {\r\n        if (!msgs) throw new Error('Must include msgs');\r\n        if (Array.isArray(msgs)) {\r\n            msgs.forEach(msg => {\r\n                if (!msg.ctx) throw new Error(`You must provide context in ${JSON.stringify(msg)}`);\r\n            });\r\n        }\r\n        else if (!msgs.ctx)  throw new Error(`You must provide context in ${JSON.stringify(msgs)}`);\r\n        const gameRest = filteredRest(gameState, /log/);\r\n        const logRest = filteredRest(gameState.log, /messages/);\r\n        \r\n        const formattedMsgs = Array.isArray(msgs) ? msgs.map(({ctx, value}) => ({ctx, value: `${gameState.turn} : ${value}`})) : {ctx: msgs.ctx, value: `${gameState.turn} : ${msgs.value}`};\r\n        \r\n        return {\r\n            log: {\r\n                messages: gameState.log.messages.concat(formattedMsgs),\r\n                ...logRest\r\n            },\r\n            ...gameRest\r\n        };\r\n    }\r\n\r\n    const handleMoveRooms = (toRoomIndex, tileIndex, fromEdge) => {\r\n        const room = gameState.location.rooms[toRoomIndex];\r\n        const toEdge = fromEdge === 'right'\r\n            ? 'left'\r\n            : fromEdge === 'top'\r\n                ? 'bottom'\r\n                : fromEdge === 'left' ?\r\n                    'right'\r\n                    : 'top';\r\n        const targetTileIndex = room.portalIndices[toEdge];\r\n        const dimensionality = room.dimensionality;\r\n        const { x, y } = toCoords(targetTileIndex, dimensionality);\r\n        const gameRest = filteredRest(addLog({ctx: 'room', value: 'You open the portal.'}), /player/);\r\n        const playerRest = filteredRest(gameState.player, /roomCoords/);\r\n        return {\r\n            player: {\r\n                roomCoords: {\r\n                    x: fromEdge === 'right' ? x + 1 : fromEdge === 'left' ? x - 1 : x,\r\n                    y,//: fromEdge === 'top' ? y + 1 : fromEdge === 'bottom' ? y - 1 : y,\r\n                    roomIndex: toRoomIndex\r\n                },\r\n                ...playerRest\r\n            },\r\n            ...gameRest\r\n        };\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'printGameState': {\r\n            gameState.turn -= 1\r\n            console.log('print gameState', gameState);\r\n            return addLog({ctx: 'console', value: 'Printed gameState'});\r\n        }\r\n\r\n        case 'addLog': return addLog(action);\r\n\r\n        case 'clearRoom': {\r\n            const gameRest = filteredRest(addLog({ctx: 'console', value: 'Cleared the room.'}), /location/);\r\n            const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n            \r\n            return {\r\n                location: {\r\n                    nearbyBeasts: [],\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'pushBeastToRoom': {\r\n            const gameRest = filteredRest(addLog({ctx: 'console', value: `Pushing ${action.beast.baseTitle} to the room.`}), /location/);\r\n            const loc = gameState.location;\r\n            const room = loc.rooms[action.roomIndex];\r\n            const dimensionality = room.dimensionality;\r\n            const locationRest = filteredRest(loc, /(nearbyBeasts)/);\r\n            const openTiles = room.tiles\r\n                .map((tile, i) => tile.tileType === 'none' ? toCoords(i, dimensionality) : null) //improve - need to check if beast or player is on tile as well\r\n                .filter(t => typeof t === 'object' ? t : false);\r\n            const { x, y } = openTiles[Math.floor(Math.random() * openTiles.length)];\r\n            const coords = {\r\n                x,\r\n                y,\r\n                roomIndex: action.roomIndex\r\n            };\r\n            const updatedBeast = Object.assign({}, action.beast, { coords }); //extend - allow to check loc.rooms[loc.level - 1].beastGenerationRules\r\n            \r\n            return {\r\n                location: {\r\n                    nearbyBeasts: loc.nearbyBeasts.filter(b => b.key !== action.beast.key).concat(updatedBeast),\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'handleClickTile': {\r\n            gameState.turn -= 1; //hack\r\n            const gameRest = filteredRest(addLog({ctx: 'roomHUD', value: `Clicked tile ${action.index}.`}), /location/);\r\n            const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n            return {\r\n                location: {\r\n                    nearbyBeasts: gameState.location.nearbyBeasts.map(b => Object.assign({}, b, {isTargeted: false})),\r\n                    ...locationRest\r\n                },\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'openTargetBeast': {\r\n            gameState.turn -= 1\r\n            const locationRest = filteredRest(gameState.location, /targetState/);\r\n            const targetState = true;\r\n            \r\n            return {\r\n                location: {\r\n                    targetState,\r\n                    ...locationRest\r\n                },\r\n                ...gameRestFromLocation\r\n            };\r\n        }\r\n\r\n        case 'handleTargetBeast': return handleTargetBeast();\r\n\r\n        case 'handleMoveActor': {\r\n            const dir = action.dir;\r\n            const room = gameState.location.rooms[gameState.player.roomCoords.roomIndex];\r\n            const dimensionality = room.dimensionality;\r\n            const { x, y } = gameState.player.roomCoords;\r\n            const dX = dir === 'left' ? -1 : dir === 'right' ? 1 : 0;\r\n            const dY = dir === 'up' ? -1 : dir === 'down' ? 1 : 0;\r\n            const tileIndex = toIndex({x: x + dX, y: y + dY}, dimensionality);\r\n            const targetTile = room.tiles[tileIndex];\r\n            \r\n            if (targetTile.tileType === 'wall') {\r\n                return addLog({ctx: 'room', value: 'You kick the wall out of spite. Ow.'});\r\n            }\r\n\r\n            if (targetTile.tileType === 'portal') {\r\n                const edge = x + dX === dimensionality - 1 ? 'right' : x + dX === 0 ? 'left' : y + dY === dimensionality - 1 ? 'bottom' : 'top';\r\n                return handleMoveRooms(targetTile.toRoomIndex, tileIndex, edge);\r\n            }\r\n\r\n            const nearbyBeastsCoords = gameState.location.nearbyBeasts.map(({coords}) => toIndex(coords, dimensionality));\r\n            if (nearbyBeastsCoords.indexOf(tileIndex) > -1) {\r\n                const beastTarget = gameState.location.nearbyBeasts[nearbyBeastsCoords.indexOf(tileIndex)];\r\n                const weapon = gameState.player.inventory.filter(item => item.type === 'weapon' && item.isEquipped)[0];\r\n                const amtFromAttack = rollDie(weapon ? weapon.damage : `1d2+${gameState.player.baseStats.strength}`);\r\n                const updatedBeast = Object.assign({}, beastTarget, {isTargeted: true, hp: beastTarget.hp - amtFromAttack >= 0 ? beastTarget.hp - amtFromAttack : 0});\r\n                const msg = updatedBeast.hp > 0 ? `You attack the ${beastTarget.baseTitle}${weapon ? ` with a ${weapon.baseTitle}.` : ''}` : updatedBeast.dyingMessage;\r\n                const gameRest = filteredRest(addLog({ctx: 'room', value: msg}), /location/);\r\n                const locationRest = filteredRest(gameState.location, /nearbyBeasts/);\r\n\r\n                //update return value: conditionally return new array only if necessary (i.e. passthrough instead of construct new)\r\n                return {\r\n                    location: {\r\n                        nearbyBeasts: gameState.location.nearbyBeasts.filter(b => b.key !== updatedBeast.key).concat(updatedBeast.hp > 0 ? updatedBeast : []),\r\n                        ...locationRest\r\n                    },\r\n                    ...gameRest\r\n                };\r\n            }\r\n\r\n            const gameRest = filteredRest(gameState, /player/);\r\n            const playerRest = filteredRest(gameState.player, /roomCoords/);\r\n           \r\n            return {\r\n                player: {\r\n                    roomCoords: {\r\n                        x: x + dX,\r\n                        y: y + dY,\r\n                        roomIndex: gameState.player.roomCoords.roomIndex\r\n                    },\r\n                    ...playerRest\r\n                },\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'adjustHP': { //consider modifying to 'adjustStat'\r\n            if (action.targetActor === 'npc') {\r\n                const loc = gameState.location;\r\n                const nearbyBeasts = loc.nearbyBeasts;\r\n                const locationRest = filteredRest(loc, /nearbyBeasts/);\r\n                const beastTarget = nearbyBeasts.filter(b => b.isTargeted)[0]; //extend to allow looping to damage/apply damage to other creatures (or consider one attack per beast in single dispatch call)\r\n                \r\n                const weapon = gameState.player.inventory.filter(item => item.type === 'weapon' && item.isEquipped)[0];\r\n                const amtFromAttack = rollDie(weapon.damage);\r\n                \r\n                const updatedBeast = Object.assign({}, beastTarget, {hp: beastTarget.hp - amtFromAttack >= 0 ? beastTarget.hp - amtFromAttack : 0});\r\n                const msg = updatedBeast.hp > 0 ? `You attack the ${updatedBeast.baseTitle}.` : updatedBeast.dyingMessage;\r\n                const rollMsg = `Rolled ${weapon.damage} for ${amtFromAttack} damage.`;\r\n                const gameRest = filteredRest(addLog([{ctx: 'room', value: msg}, {ctx: 'roller', value: rollMsg}]), /(location)/);\r\n                \r\n                return {\r\n                    location: {\r\n                        nearbyBeasts: nearbyBeasts.filter(b => !b.isTargeted).concat(updatedBeast.hp > 0 ? updatedBeast : []),\r\n                        ...locationRest\r\n                    },\r\n                    ...gameRest\r\n                };\r\n            }\r\n            else {\r\n                const gameRest = filteredRest(gameState, /player/);\r\n                const playerRest = filteredRest(gameState.player, /vitalStats/);\r\n                const vitalStatsRest = filteredRest(gameState.player.vitalStats, /hp/);\r\n                \r\n                return {\r\n                    player: {\r\n                        vitalStats: {\r\n                            hp: gameState.player.vitalStats.hp + action.amt,\r\n                            ...vitalStatsRest\r\n                        },\r\n                        ...playerRest\r\n                    },\r\n                    ...gameRest\r\n                }\r\n            }\r\n        }\r\n\r\n        case 'handleToggleInventory': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            \r\n            return {\r\n                focusMode: gameState.focusMode === 'inventory' ? null : 'inventory',\r\n                ...gameRest\r\n            };\r\n        }\r\n\r\n        case 'handleClosePanel': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            \r\n            return {\r\n                focusMode: null,\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'toggleConsole': {\r\n            gameState.turn -= 1\r\n            const gameRest = filteredRest(gameState, /focusMode/);\r\n            const focusMode = gameState.focusMode === 'console' ? null : 'console'\r\n            \r\n            return {\r\n                focusMode,\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        case 'applyAction': {\r\n            const value = `You ${action.itmAction.type} the ${action.item.baseTitle}${action.target ? ` ${action.target.verb} the ${action.target.baseTitle}` : ''}.`;\r\n            const gameRest = filteredRest(addLog({ctx: 'room', value}), /player/);\r\n            const playerRest = filteredRest(gameState.player, /inventory/);\r\n            return {\r\n                player: {\r\n                    inventory: action.itmAction.doesRemove ? gameState.player.inventory.filter(item => item.key !== action.item.key) : gameState.player.inventory,\r\n                    ...playerRest\r\n                },\r\n                ...gameRest\r\n            }\r\n        }\r\n\r\n        default: throw new Error(`Must include a valid action.type in action ${JSON.stringify(action)}`);\r\n    }\r\n}\r\n\r\nconst GameStateProvider = (props) => {\r\n    const [gameState, dispatchGameState] = useReducer(gameStateReducer, initGameState);\r\n    const value = useMemo(() => [gameState, dispatchGameState], [gameState])\r\n    return <GameStateContext.Provider value={value} {...props}/>;\r\n}\r\n\r\nexport default GameStateProvider;\r\nexport { useGameState };","import React from 'react';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst PrintBtn = () => {\r\n    const [, dispatchGameState] = useGameState();\r\n    const printGameState = () => dispatchGameState({\r\n        ctx: 'printBtn',\r\n        type: 'printGameState'\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={printGameState}>Print GameState</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrintBtn;","const beastDictionary = {\r\n  'Cave Spider': {\r\n    baseTitle: 'Cave Spider',\r\n    scarcity: '1d4-1', //each time a room is generated, an amount of this beast is rolled for; higher rolls indicate higher frequency etc.\r\n    healthDie: '1d3+1',\r\n    armorDie: 0,\r\n    savingThrowDie: '1d6',\r\n    strength: '1d4',\r\n    elementalScarcity: '2d6',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/2/28/Araneus_diadematus_%28Spider_underside%29.jpg',\r\n    dyingMessage: 'You squish the spider. Then wish you hadn\\'t.'\r\n  },\r\n  'Cave Rat': {\r\n    baseTitle: 'Cave Rat',\r\n    scarcity: '1d4-2',\r\n    healthDie: '1d2+1',\r\n    armorDie: 0,\r\n    savingThrowDie: 0,\r\n    strength: 2,\r\n    elementalScarcity: '3d6',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/1/1d/Albino_Rat.jpg',\r\n    dyingMessage: 'You squish the rat. Then wish you hadn\\'t.'\r\n  },\r\n  'Un Beast': {\r\n    baseTitle: 'Un Beast',\r\n    scarcity: '1d4-2',\r\n    healthDie: '2d6+5',\r\n    armorDie: 5,\r\n    savingThrowDie: 0,\r\n    strength: 5,\r\n    elementalScarcity: '1d4',\r\n    imgSrc: 'https://upload.wikimedia.org/wikipedia/commons/1/1d/Albino_Rat.jpg',\r\n    dyingMessage: 'You unmake the unbeast. Huh.'\r\n  }\r\n}\r\n\r\nexport default beastDictionary;","const elements = {\r\n  fire: {\r\n    scarcity: 0.8,\r\n    healthMod: 1\r\n  },\r\n  water: {\r\n    scarcity: 0.8,\r\n    healthMod: 1\r\n  },\r\n  nether: {\r\n    scarcity: 0.2,\r\n    healthMod: 5\r\n  }\r\n}\r\n\r\nexport default elements;","import rollDie from './rollDie';\r\nimport beastDictionary from '../dictionaries/beastDictionary';\r\nimport elements from '../initModels/elements';\r\n\r\nconst getKey = () => Math.random() * 100;\r\n\r\nconst generateNewBeast = (allowedBeasts = ['spider'], locationLvl = 1) => {\r\n  const floorDCChecks = { //roll DC checks based on Location lvl; think \"roll on table 'y' for 'x' LocationLvl\"\r\n    elements: rollDie('2d4+4')\r\n  };\r\n  const lvlMod = locationLvl - 1; //only allow beasts to mod at >= lvl2\r\n\r\n  const beastBaseTitle = allowedBeasts[Math.floor(Math.random() * allowedBeasts.length)];\r\n  const beastRef = beastDictionary[beastBaseTitle];\r\n  const key = getKey();\r\n  const hp = rollDie(beastRef.healthDie) + lvlMod;\r\n  const maxHp = hp;\r\n  const elem = rollDie(beastRef.elementalScarcity) + lvlMod > floorDCChecks.elements ? elements[Math.floor(Math.random() * elements.length)] : null;\r\n\r\n  const generatedParams = {\r\n    hp,\r\n    maxHp,\r\n    key,\r\n    elem\r\n  }\r\n  \r\n  return Object.assign({}, beastRef, generatedParams);\r\n}\r\n\r\nexport default generateNewBeast;","import React, { Fragment, useState } from 'react';\r\nimport generateNewBeast from '../../../../helpers/utilityLambdas/generateNewBeast';\r\nimport beastDictionary from '../../../../helpers/dictionaries/beastDictionary';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\nimport './Beasterator.css';\r\n\r\nconst Beasterator = () => {\r\n  const [gameState, dispatchGameState] = useGameState();\r\n  const [beast, setBeast] = useState(null);\r\n  const [selectedBeastList, setBeastList] = useState([]);\r\n  const ctx = 'console';\r\n\r\n  const getNewBeast = () => generateNewBeast(selectedBeastList.length > 0 ? selectedBeastList : Object.keys(beastDictionary))\r\n\r\n  const handleClickNewBeast = () => {\r\n    const newBeast = getNewBeast();\r\n    dispatchGameState({\r\n      ctx,\r\n      type: 'addLog',\r\n      value: `Generated a new ${newBeast.baseTitle}`\r\n    });\r\n    setBeast(newBeast);\r\n  }\r\n\r\n  const handleToggleCheckbox = (b) => {\r\n    const concat = selectedBeastList.indexOf(b) === -1;\r\n    const updatedList = concat ? selectedBeastList.concat(b) : selectedBeastList.filter(s => s !== b);\r\n    setBeastList(updatedList);\r\n  }\r\n\r\n  const handlePushBeast = () => {\r\n    const newBeast = beast ? beast : getNewBeast();\r\n    dispatchGameState({\r\n      ctx,\r\n      type: 'pushBeastToRoom',\r\n      beast: newBeast,\r\n      roomIndex: gameState.player.roomCoords.roomIndex\r\n    });\r\n    setBeast(null);\r\n  }\r\n\r\n  const beastCheckboxes = Object.keys(beastDictionary).map(b => (\r\n    <Fragment key={b}>\r\n      <label>{b}</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        value={selectedBeastList.indexOf() > -1}\r\n        onClick={() => handleToggleCheckbox(b)}\r\n      />\r\n    </Fragment>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"beasterator\">\r\n      <div className=\"console-component-title\">\r\n        <h3>Beasterator</h3>\r\n      </div>\r\n      <div className=\"beasterator-controls\">\r\n        {beastCheckboxes}\r\n      </div>\r\n      <div className=\"btn\">\r\n        <button onClick={handleClickNewBeast}>Generate new beast</button>\r\n        <button onClick={handlePushBeast}>Generate + push to Room</button>\r\n      </div>\r\n      <div className=\"beast-container\">\r\n        {beast &&\r\n          <>\r\n            <button onClick={() => handlePushBeast(beast)}>Push to Room</button>\r\n          </>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Beasterator;","import React, { useState } from 'react';\r\nimport rollDie from '../../../../helpers/utilityLambdas/rollDie';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst standardDice = [\r\n  4,\r\n  6,\r\n  8,\r\n  10,\r\n  12,\r\n  16,\r\n  20\r\n];\r\n\r\nconst Roller = () => {\r\n  const [, dispatchGameState] = useGameState();\r\n  const [dieAmt, setDieAmt] = useState(1);\r\n  const [die, setDie] = useState('d4');\r\n  const [mod, setMod] = useState(0);\r\n  const [rollVal, setRollVal] = useState(0);\r\n\r\n  const handleModifierOnChange = ({target}) => setMod(target.value);\r\n\r\n  const handleDieNumberOnChange = ({target}) => setDieAmt(target.value);\r\n\r\n  const handleDieSelect = (d) => setDie(d);\r\n\r\n  const handleRoll = () => {\r\n    const rollResult = rollDie(rollString);\r\n    dispatchGameState({\r\n      ctx: 'console',\r\n      type: 'addLog',\r\n      value: `Rolling ${rollString}... Result: ${rollResult}`\r\n    });\r\n    setRollVal(rollResult);\r\n  }\r\n\r\n  const diceBtns = standardDice.map(d => {\r\n    const btnDie = `d${d}`;\r\n    return (\r\n      <button\r\n        key={d}\r\n        onClick={() => handleDieSelect(btnDie)}\r\n        className={`btn${btnDie === die ? ' active' : ''}`}\r\n      >\r\n        {btnDie}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  const rollString = `${dieAmt}${die}${mod > 0 ? `+${mod}` : ''}`;\r\n\r\n  return (\r\n    <div className=\"roller\">\r\n      <div className=\"console-component-title\">\r\n        <h3>Roller</h3>\r\n      </div>\r\n      <div className=\"button-die-number\">\r\n        <input onChange={handleDieNumberOnChange} value={dieAmt}/>\r\n      </div>\r\n      <div className=\"button-group-dice\">\r\n        {diceBtns}\r\n      </div>\r\n      <div className=\"modifiers\">\r\n        Set modifier\r\n        <input type=\"number\" onChange={handleModifierOnChange} value={mod}/>\r\n      </div>\r\n      <button onClick={handleRoll} msg={`[Roller]: Rolled ${rollString}`}>Roll die</button>\r\n      {rollVal && (\r\n        <div className=\"roll-value\">\r\n          Rolling {rollString}... {rollVal}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Roller;","import React from 'react';\r\nimport { useGameState } from '../../../../helpers/reducers/gameStateReducer';\r\n\r\nconst Locationator = () => {\r\n    const [gameState, dispatchGameState] = useGameState();\r\n\r\n    const ctx = 'locationator';\r\n\r\n    const handleClearRoom = () => {\r\n        dispatchGameState({\r\n            ctx,\r\n            type: 'clearRoom'\r\n        });\r\n    }\r\n\r\n    const handleClearBattle = () => {\r\n        dispatchGameState({\r\n            ctx,\r\n            type: 'clearBattle'\r\n        });\r\n    }\r\n\r\n    const {location} = gameState;\r\n    const {nearbyBeasts} = location;\r\n    return (\r\n        <div className=\"locationator\">\r\n            {nearbyBeasts.length > 0 && (\r\n                <button onClick={handleClearRoom}>\r\n                    Clear Room\r\n                </button>\r\n            )}\r\n            {nearbyBeasts.filter(b => b.isInBattle).length > 0 && (\r\n                <button onClick={handleClearBattle}>\r\n                    Clear Battle\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Locationator;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport PrintBtn from './PrintBtn';\r\nimport Beasterator from './Beasterator'\r\nimport Roller from './Roller';\r\nimport Locationator from './Locationator';\r\nimport './Console.css';\r\n\r\nconst Console = () => {\r\n    const [gameState] = useGameState();\r\n    \r\n    const isActive = gameState.focusMode === 'console';\r\n    return (\r\n        <div className={`console${isActive ? ' active' : ''}`}>\r\n            <PrintBtn/>\r\n            <Beasterator/>\r\n            <Roller/>\r\n            <Locationator/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Console;","import React from 'react';\r\nimport avatar from '../../../media/img/rl_avatar.svg';\r\nimport './PlayerAvatar.css';\r\n\r\nconst PlayerAvatar = () => {\r\n    return (\r\n        <div className=\"player-display-avatar\">\r\n            <img src={avatar} alt=\"player avatar\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerAvatar;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './PlayerStats.css';\r\n\r\nconst PlayerStats = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const playerStats = gameState.player.vitalStats;\r\n    return (\r\n        <div className=\"player-display-stats\">\r\n            <div className=\"player-display-inner\">\r\n                {Object.keys(playerStats).map(s => <div key={s}>{s}: {playerStats[s]}</div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerStats;","import React from 'react';\r\nimport PlayerAvatar from '../../atoms/PlayerAvatar';\r\nimport PlayerStats from '../../molecules/PlayerStats';\r\nimport './PlayerDisplay.css';\r\n\r\nconst PlayerDisplay = () => {\r\n    return (\r\n        <div className=\"player-display\">\r\n            <PlayerAvatar/>\r\n            <PlayerStats/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerDisplay;","import React from 'react';\r\n\r\nconst LogBody = ({messages}) => {\r\n    return (\r\n        <div className=\"log-body-inner-container\">\r\n            {messages.map((m, i) => (\r\n                <div key={m.value.concat(i)}>\r\n                    <span>{m.value}</span>\r\n                </div>\r\n            ))\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogBody;","import React from 'react'\r\n\r\nconst LogScrollBtns = ({messagesLength, activeViewIndex, handleAdjustViewIndex}) => {\r\n    return (\r\n        <div className=\"log-body-view-index-btns\">\r\n            <div className=\"view-index-btns-container\">\r\n                <button className={`view-index-btn${(messagesLength === 0 || activeViewIndex === messagesLength - 1) ? ' disabled' : ''}`} onClick={() => handleAdjustViewIndex(1)}>↑</button>\r\n                <button className={`view-index-btn${activeViewIndex === 0 ? ' disabled' : ''}`} onClick={() => handleAdjustViewIndex(-1)}>↓</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogScrollBtns;","import React from 'react';\r\n\r\nconst LogFilterBtns = ({ctxFocus, displayTypes, handleFilterClick}) => {\r\n    const filterButtons = displayTypes.map(t => (\r\n        <button className={`filter-btn${ctxFocus === t ? ' active' : ''}`} key={t} onClick={() => handleFilterClick(t)}>\r\n            <span>{t}</span>\r\n        </button>\r\n    ));\r\n    return (\r\n        <div className=\"log-filter-btns\">\r\n            {filterButtons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogFilterBtns;","import React, { useState, useMemo } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport LogBody from '../../molecules/LogBody';\r\nimport LogScrollBtns from '../../molecules/LogScrollBtns';\r\nimport LogFilterBtns from '../../molecules/LogFilterBtns';\r\nimport './Log.css';\r\n\r\nconst Log = () => {\r\n    const [gameState] = useGameState();\r\n    const [ctxFocus, setCtxFocus] = useState('general');\r\n    const [activeViewIndex, setActiveViewIndex] = useState(0);\r\n    \r\n    const displayTypes = useMemo(() => {\r\n        return gameState.log.messages\r\n            .map(({ctx}) => ctx)\r\n            .reduce((acc, curr) => {\r\n                if (acc.indexOf(curr) > -1) return acc;\r\n                else return acc.concat(',').concat(curr);\r\n            })\r\n            .split(',');\r\n        }, [gameState.log.messages]);\r\n\r\n    const handleFilterClick = (t) => {\r\n        setActiveViewIndex(0);\r\n        setCtxFocus(t);\r\n    }\r\n\r\n    const messages = gameState.log.messages;\r\n    const filteredMessages = ctxFocus === 'general' ? messages : messages.filter(({ctx}) => ctx === ctxFocus);\r\n    const VIEW_LIMIT = 11; //arbitrary - draw by element.getClientBoundingRect()\r\n\r\n    const adjustViewIndex = (amt) => {\r\n        if (activeViewIndex + amt < 0 || activeViewIndex + amt > filteredMessages.length - 1) return;\r\n        setActiveViewIndex(amt ? activeViewIndex + amt : 0);\r\n    }\r\n    \r\n    const endIndex = filteredMessages.length - activeViewIndex;\r\n    const begIndex = endIndex >= VIEW_LIMIT ? endIndex - VIEW_LIMIT : 0;\r\n    const logMessages = filteredMessages.slice(begIndex, endIndex);\r\n        \r\n    return (\r\n        <div className=\"log\">\r\n            <div className=\"log-body panel\" style={{padding: '0.25em'}}>\r\n                <LogBody\r\n                    messages={logMessages}\r\n                />\r\n                <LogScrollBtns\r\n                    messagesLength={filteredMessages.length}\r\n                    handleAdjustViewIndex={adjustViewIndex}\r\n                />\r\n            </div>\r\n            <LogFilterBtns\r\n                ctxFocus={ctxFocus}\r\n                handleFilterClick={handleFilterClick}\r\n                displayTypes={displayTypes}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Log;","import React from 'react';\r\nimport PlayerDisplay from '..//PlayerDisplay';\r\nimport Log from '../Log';\r\nimport './HUD.css';\r\n\r\nconst HUD = () => {\r\n    return (\r\n        <div className=\"heads-up-display\">\r\n            <PlayerDisplay/>\r\n            <Log/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HUD;","const canDrop = {\r\n    type: 'drop',\r\n    doesRemove: true\r\n};\r\n\r\nconst canThrow = {\r\n    type: 'throw',\r\n    doesRemove: true\r\n};\r\n\r\nconst itemDictionary = {\r\n    weapon: {\r\n        allowedActions: [\r\n            {\r\n                type: 'attack',\r\n                doesRemove: false\r\n            },\r\n            {...canThrow},\r\n            {...canDrop}\r\n        ]\r\n    },\r\n    potion: {\r\n        allowedActions: [\r\n            {\r\n                type: 'quaff',\r\n                doesRemove: true\r\n            },\r\n            {...canDrop}\r\n        ]\r\n    }\r\n};\r\n\r\nexport default itemDictionary;","import React, { useState } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport itemDictionary from '../../../helpers/dictionaries/itemDictionary';\r\nimport './InventoryControls.css';\r\n\r\nconst InventoryControls = () => {\r\n    const [gameState, dispatchGameState] = useGameState();\r\n    const [focusItem, setFocusItem] = useState();\r\n\r\n    const handleUseItem = (itmAction) => dispatchGameState({\r\n        ctx: 'inventory',\r\n        type: 'applyAction',\r\n        item: focusItem,\r\n        itmAction\r\n    });\r\n\r\n    const inventory = gameState.player.inventory.map((item, i) => (\r\n        <div key={item.baseTitle.concat(i)} className=\"inventory-item\" onClick={() => setFocusItem(item)}>\r\n            {item.baseTitle}\r\n        </div>\r\n    ));\r\n    const isInIventory = focusItem && focusItem.hasOwnProperty('key') && gameState.player.inventory.filter(item => item.key === focusItem.key).length > 0;\r\n    \r\n    return (\r\n        <div className=\"inventory-controls\">\r\n            {inventory}\r\n            {isInIventory && (\r\n                <div className=\"focus-item-container\">\r\n                    <h5>Use {focusItem.baseTitle}</h5>\r\n                    <div className=\"focus-item-action-list\">\r\n                        {itemDictionary[focusItem.type].allowedActions.map(a => (\r\n                            <button key={a.type} onClick={() => handleUseItem(a)}>{a.type}</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InventoryControls;","import React from 'react'\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport InventoryControls from '../../molecules/InventoryControls';\r\nimport './ControlsPanel.css';\r\n\r\nconst ControlsPanel = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    return (\r\n        <div className={`controls-panel${gameState.focusMode === 'inventory' ? ' active': ''}`}>\r\n            {gameState.focusMode === 'inventory' && <InventoryControls/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlsPanel;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './TargetHUD.css';\r\n\r\nconst beastTargetParams = /(baseTitle|scarcity|strength|hp|maxHp|elem|coords)/;\r\n\r\nconst TargetHUD = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const targetedObject = gameState.location.nearbyBeasts.filter(b => b.isTargeted)[0];\r\n    return (\r\n        <div className=\"target-heads-up-display\">\r\n            {targetedObject && (\r\n                <div className=\"target-heads-up-display-inner-container\">\r\n                    {Object.keys(targetedObject).filter(k => beastTargetParams.test(k)).map(k => <div key={k}><b>{k}:</b> {JSON.stringify(targetedObject[k])}</div>)}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TargetHUD;","import React from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport TargetHUD from '../TargetHUD';\r\nimport './ActionHUD.css';\r\n\r\nconst ActionHUD = () => {\r\n    const [gameState] = useGameState();\r\n\r\n    const roomStats = gameState.location.nearbyBeasts.filter(beast => beast.coords.roomIndex === gameState.player.roomCoords.roomIndex).length;\r\n    const roomHUD = gameState.log.messages.filter(m => m.ctx === 'roomHUD');\r\n    const roomHUDTip = roomHUD ? roomHUD[roomHUD.length - 1] : null;\r\n    return (\r\n        <div className=\"action-heads-up-display panel\">\r\n            <div>\r\n                <div>Beasts in room: {roomStats}</div>\r\n                <div>{roomHUDTip && roomHUDTip.value}</div>\r\n            </div>\r\n            <TargetHUD/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActionHUD;","import React from 'react';\r\n\r\nconst PlayerCell = ({gridAreaStyle}) => <div className={`player`} style={gridAreaStyle}></div>;\r\n\r\nexport default PlayerCell;","import React from 'react';\r\nimport PlayerCell from '../../atoms/PlayerCell';\r\n\r\nconst PlayerGrid = ({gridStyle, playerCoords}) => {\r\n    const gridAreaStyle = {\r\n        gridColumn: `${playerCoords.x + 1} / ${playerCoords.x + 1}`,\r\n        gridRow: `${playerCoords.y + 1} / ${playerCoords.y + 1}`\r\n    };\r\n    \r\n    return (\r\n        <div className=\"room-grid player-grid\" style={gridStyle}>\r\n            <PlayerCell playerCoords={playerCoords} gridAreaStyle={gridAreaStyle}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerGrid;","import React from 'react';\r\nimport './BeastHealthBar.css';\r\n\r\nconst BeastHealthBar = ({currHealth, maxHealth}) => {\r\n  const width = `${currHealth / maxHealth * 100}%`;\r\n  const barStyle = {\r\n    width\r\n  };\r\n  return (\r\n    <div className=\"health-bar\">\r\n      <span style={barStyle}></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BeastHealthBar;","import React from 'react';\r\nimport BeastHealthBar from '../BeastHealthBar';\r\n\r\nconst BeastCell = ({beast, gridAreaStyle, onClick}) => {\r\n    return (\r\n        <div onClick={onClick} className={`beast ${beast.baseTitle.replace(/\\s/g, '-').toLowerCase()}${beast.isTargeted ? ' is-targeted' : ''}`} style={gridAreaStyle}>\r\n            <BeastHealthBar currHealth={beast.hp} maxHealth={beast.maxHp}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BeastCell;","import React from 'react';\r\nimport BeastCell from '../../molecules/BeastCell';\r\nimport './ActorGrid.css';\r\n\r\nconst ActorGrid = ({gridStyle, nearbyBeasts, onClick}) => {\r\n    return (\r\n        <div className=\"room-grid actor-grid\" style={gridStyle}>\r\n            {nearbyBeasts.length > 0 && (\r\n                nearbyBeasts.map(beast => {\r\n                    const beastGridAreaStyle = {\r\n                        gridColumn: `${beast.coords.x + 1} / ${beast.coords.x + 1}`,\r\n                        gridRow: `${beast.coords.y + 1} / ${beast.coords.y + 1}`\r\n                    };\r\n                    const dispatchParams = {\r\n                        ctx: 'BeastCell',\r\n                        type: 'handleTargetBeast',\r\n                        beast\r\n                    };\r\n                    \r\n                    return (\r\n                        <BeastCell\r\n                            key={''.concat(beast.coords.x).concat(beast.coords.y)}\r\n                            onClick={() => onClick(dispatchParams)}\r\n                            beast={beast}\r\n                            gridAreaStyle={beastGridAreaStyle}\r\n                        />\r\n                    );\r\n                })\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActorGrid;","import React from 'react';\r\n\r\nconst Cell = ({tileType, onClick, toRoomIndex}) => {\r\n    return (\r\n        <div className={`map-tile ${tileType}`} onClick={onClick}>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cell;","import React, { useMemo } from 'react';\r\nimport Cell from '../../atoms/Cell';\r\n\r\nconst TileGrid = ({tiles, gridStyle, handleClickTile}) => {\r\n    //console.log('Invoke <TileGrid>')\r\n    const roomCoords = useMemo(() => {\r\n        const onClickTile = (index) => handleClickTile({\r\n            ctx: 'cell',\r\n            type: 'handleClickTile',\r\n            index\r\n        });\r\n\r\n        return tiles.map(({tileType, toRoomIndex}, i) => {\r\n            return (\r\n                <Cell\r\n                    key={i}\r\n                    tileType={tileType}\r\n                    onClick={() => onClickTile(i)}\r\n                    toRoomIndex={toRoomIndex}\r\n                />\r\n            );\r\n        });\r\n    }, [\r\n        tiles,\r\n        handleClickTile\r\n    ]);\r\n\r\n    return (\r\n        <div className=\"room-grid tile-grid\" style={gridStyle}>\r\n            {roomCoords}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TileGrid;","import React, { useEffect, useMemo } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport PlayerGrid from '../../molecules/PlayerGrid';\r\nimport ActorGrid from '../../molecules/ActorGrid';\r\nimport TileGrid from '../../molecules/TileGrid';\r\nimport './Room.css';\r\n\r\nconst gridUnit = '1em';\r\n\r\nconst Room = ({roomIndex}) => {\r\n    //console.log('Invoke <Room>');\r\n    const [gameState, dispatchGameState] = useGameState();\r\n\r\n    const ctx = 'Room';\r\n\r\n    useEffect(() => {\r\n        const handleToggleConsole = () => dispatchGameState({\r\n            ctx,\r\n            type: 'toggleConsole'\r\n        });\r\n        const handleToggleInventory = (forceClose) => dispatchGameState({\r\n            ctx,\r\n            type: forceClose ? 'handleClosePanel' : 'handleToggleInventory'\r\n        });\r\n        const handleArrowPress = (kCode) => {\r\n            const dirFromCode = () => {\r\n                switch (kCode) {\r\n                    case 37: return 'left';\r\n                    case 38: return 'up';\r\n                    case 39: return 'right';\r\n                    case 40: return 'down';\r\n                    default: {\r\n                        throw new Error(`Invalid keyCode supplied ${JSON.stringify(kCode)}`);\r\n                    }\r\n                }\r\n            };\r\n            dispatchGameState({\r\n                ctx,\r\n                type: 'handleMoveActor',\r\n                dir: dirFromCode()\r\n            });\r\n        };\r\n\r\n        const arrowHandlerKeyCodes = [\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        ];\r\n    \r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.isComposing || e.keyCode === 229) return;\r\n            if (arrowHandlerKeyCodes.indexOf(e.keyCode) > -1) handleArrowPress(e.keyCode);\r\n            if (e.keyCode === 73) handleToggleInventory();\r\n            if (e.keyCode === 27) handleToggleInventory(true);\r\n            if (e.keyCode === 67) handleToggleConsole();\r\n        });\r\n    }, [dispatchGameState]);\r\n\r\n    const room = gameState.location.rooms[roomIndex];\r\n    const dimensionality = room.dimensionality;\r\n    const tiles = room.tiles;\r\n    const playerCoords = gameState.player.roomCoords;\r\n    const nearbyBeasts = gameState.location.nearbyBeasts.filter(beast => beast.coords.roomIndex === roomIndex);\r\n\r\n    const handleTargetBeast = dispatchGameState;\r\n    const gridStyle = {\r\n        gridTemplateColumns: `repeat(${dimensionality}, ${gridUnit})`,\r\n        gridTemplateRows: `repeat(${dimensionality}, ${gridUnit})`\r\n    };\r\n    \r\n    const display = (\r\n        <>\r\n            <PlayerGrid\r\n                gridStyle={gridStyle}\r\n                playerCoords={playerCoords}\r\n            />\r\n            <ActorGrid\r\n                gridStyle={gridStyle}\r\n                nearbyBeasts={nearbyBeasts}\r\n                onClick={handleTargetBeast}\r\n            />\r\n            <TileGrid\r\n                gridStyle={gridStyle}\r\n                tiles={tiles}\r\n                roomIndex={roomIndex}\r\n                handleClickTile={dispatchGameState}\r\n            />\r\n        </>\r\n    );\r\n\r\n    const roomStyle = {\r\n        width: `${dimensionality}em`,\r\n        height: `${dimensionality}em`\r\n    };\r\n    \r\n    return (\r\n        <div className=\"room\" style={roomStyle}>\r\n            {display}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Room;","import React, { useMemo } from 'react';\r\nimport Room from '../Room';\r\nimport './ActionDisplay.css';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\n\r\nconst ActionDisplay = () => {\r\n    //console.log('Invoke <ActionDisplay>');\r\n    const [gameState] = useGameState();\r\n\r\n    const roomIndex = gameState.player.roomCoords.roomIndex;\r\n    const display = useMemo(() => {\r\n        //console.log('useMemo for <Room> within <ActionDisplay>', roomIndex, typeof roomIndex);\r\n        return <Room roomIndex={roomIndex}/>\r\n    }, [\r\n        roomIndex\r\n    ]);\r\n\r\n    return (\r\n        <div className=\"action-display\">\r\n            {display}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActionDisplay;","import React, { useMemo } from 'react';\r\nimport { useGameState } from '../../../helpers/reducers/gameStateReducer';\r\nimport './MapDisplay.css';\r\n\r\nconst MapDisplay = () => {\r\n    //console.log('Invoke <MapDisplay>');\r\n    const [gameState] = useGameState();\r\n\r\n    const mapCells = useMemo(() => gameState.location.rooms.map(({dimensionality}, i) => {\r\n        const isPlayerInRoom = gameState.player.roomCoords.roomIndex === i;\r\n        const style = {\r\n            width: `${dimensionality}em`,\r\n            height: `${dimensionality}em`,\r\n            backgroundColor: isPlayerInRoom ? 'var(--red-dk-one)' : 'var(--red-dk-two)'\r\n        };\r\n        return (\r\n            <span key={i} className=\"map-room-tile\" style={style}></span>\r\n        );\r\n    }), [\r\n        gameState.player.roomCoords.roomIndex,\r\n        gameState.location.rooms\r\n    ]);\r\n\r\n    return (\r\n        <div className=\"map-display panel\">\r\n            <div className=\"map-display-inner-container\">\r\n                {mapCells}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapDisplay;","import React from 'react';\r\nimport ActionHUD from '../ActionHUD';\r\nimport ActionDisplay from '../ActionDisplay';\r\nimport MapDisplay from '../MapDisplay';\r\nimport './GameDisplay.css';\r\n\r\nconst GameDisplay = () => {\r\n    //console.log('invoke <GameDisplay>')\r\n    return (\r\n        <div className=\"game-display\">\r\n            <ActionDisplay/>\r\n            <ActionHUD/>\r\n            <MapDisplay/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameDisplay;","import React from 'react';\r\nimport './InfoPanel.css';\r\n\r\nconst CommandInfoPanel = () => {\r\n    return (\r\n        <div className=\"command-instruction-panel\">\r\n            <div>\r\n                c: toggle console\r\n            </div>\r\n            <div>\r\n                i: inventory\r\n            </div>\r\n            <div>\r\n                arrow keys: navigate\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst InfoPanel = () => {\r\n    return (\r\n        <div className=\"info-panel\">\r\n            <div className=\"info-panel-inner panel\">\r\n                <CommandInfoPanel/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoPanel;","import React from 'react';\r\nimport GameStateProvider from '../../../helpers/reducers/gameStateReducer';\r\nimport Console from '../Console';\r\nimport HUD from '../HUD';\r\nimport ControlsPanel from '../ControlsPanel';\r\nimport GameDisplay from '../GameDisplay';\r\nimport InfoPanel from '../InfoPanel';\r\nimport './Game.css';\r\n\r\nconst Game = () => {\r\n    //console.log('Invoke <Game>');\r\n    return (\r\n        <GameStateProvider>\r\n            <Console/>\r\n            <div className=\"game\">\r\n                <HUD/>\r\n                <ControlsPanel/>\r\n                <GameDisplay/>\r\n                <InfoPanel/>\r\n            </div>\r\n        </GameStateProvider>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './components/containers/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}